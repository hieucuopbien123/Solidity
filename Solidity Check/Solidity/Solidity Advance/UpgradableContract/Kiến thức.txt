Deploy 1 contract lên, xong về sau ta lại muốn chỉnh sửa code bên trong contract theo 1 logic mới chẳng hạn. 
Tưởng dễ nhưng nhiều vấn đề cần giải quyết như tùy vào mức độ chỉnh sửa chỉ muốn thay đổi logic còn params giữ nguyên hay thay đổi params, thay đổi cả giá trị trả về hay không. Contract với data đơn giản dễ đổi hay contract lớn phức tạp. Địa chỉ thay đổi sang 1 contract khác hay vẫn muốn giữ địa chỉ contract cũ. Khi front-end gọi hàm của dự án thì gọi vào 1 địa chỉ thì địa chỉ đó là proxy contract hay là địa chỉ của contract gốc. 

Cơ chế chung là: ta tạo ra 1 contract khác tương tự như v nhưng với logic mới theo ý ta, xong tạo ra 1 proxy contract có owner được quyền update địa chỉ contract để khi muốn gọi hàm nào thì call vào proxy contract để thực hiện trên contract logic mới chứ k dùng địa chỉ cũ nx. Hàm gọi đó sẽ dùng delegatecall để trong fallback. Điều này cũng được openzeppelin thực hiện sẵn và tối ưu hóa gas và tốc độ bằng assembly cho người dùng. 

Giả sử k có delegatecall thì với 1 tư duy thông thường mà muốn update 1 smart contract không phải là không thể. Hướng đi là backup dữ liệu của smart contrac cũ về 1 database realtime, tạo và deploy 1 contract mới theo logic mới, deploy contract mới lên mạng và migrate đống dữ liệu đã backup lên, rồi thay đổi các thứ khác như frontend backend dùng dữ liệu địa chỉ mới và fix các thứ là sự khác biệt giữa 2 contract. 
=> Tư duy này dùng được khi dữ liệu ít và smart contract mới phải tạo thêm hàm migrate tất cả dữ liệu lên. Ta k nghĩ theo hướng đó nx

Phân biệt call, staticcall, delegatecall:
-call là cách ta gọi 1 hàm của contract khác từ contract này, gọi bất cứ hàm gì, và có thể gọi vào hàm k tồn tại để mục đích gửi tiền cx ok. Call và interface là 2 cách gọi hàm phổ biến nhưng interface phải biết abi còn call thì cả cần. State và function của contract nào thì tác động đúng contract địa chỉ đó rõ ràng như mặc định. EVM trigger việc gọi hàm khác thông qua 4 bytes đầu tiên là hash của method. Tiếp sau đó là các chuỗi có độ dài fix 32 bytes VD trên Etherscan có thể xem:
MethodID: 0x2d2da806
[0]: 000000000000000000000000e105ba42b66d08ac7ca7fc48c583599044a6dab3
thì 0x2d2da806 là 4 bytes đầu của giá trị hash keccak256 của depositETH(address) có thể check bằng công cụ hash keccak online: https://emn178.github.io/online-tools/keccak_256.html, còn giá trị [0] là input method dưới dạng 32bytes được đánh số từ 0. 
-delegatecall: cũng là gọi hàm của contract khác nhưng state lại là của contract này(2 contract phải đúng thứ tự biến). Người A gọi vào contract B delegate call đến contract C thì msg.sender trong hàm contract C vẫn là A. delegatecall thường được sử dụng trong proxy pattern
-staticcall cơ bản giống call chỉ khác là dùng staticcall k đổi state của contract. Do đó nó mới ít dùng mà dùng mẹ call luôn
=> Cả 3 loại call đều có hàm assembly để thực hiện để tối ưu

Các opcode liên quan:
-calldatacopy(1,0,calldatasize()) => copy size of data từ calldata vị trí 0 vào memory từ vị trí 1
-returndatacopy(0,0,returndatasize()) => copy size of last returndata từ vị trí 0 vào memory từ vị trí 0. Vì data dù return về nhưng chưa lưu được nên dùng hàm này để lưu
-revert(0,returndatasize()) => kết thúc và revert state hàm này và trả ra data từ vị trí 0 đến vị trí 0+size of last return data
-delegatecall(gas(),target,0,calldatasize(),0,0) => target là 1 địa chỉ. sẽ delegatecall contract tại địa chỉ target với input là memory từ 0 đến 0+calldatasize với gas là gas() trả ra lượng gas available hiện tại và kết quả output là lưu từ 0 -> 0+0 và trả ra 0 nếu error
Full thông tin: https://docs.soliditylang.org/en/v0.5.3/assembly.html

Phiên bản proxy sơ khai nhất như dưới:
pragma solidity >=0.8.3;
contract Proxy {
    address immutable public implementation;
    event Received(uint indexed value, address indexed sender, bytes data);
    constructor(address _implementation) {
        implementation = _implementation;
    }
    fallback() external payable {
        address target = implementation;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            switch result
            case 0 {revert(0, returndatasize())}
            default {return (0, returndatasize())}
        }
    }
    receive() external payable {
        emit Received(msg.value, msg.sender, "");
    }
}
=> Ở đây những gì nó làm là có 1 cái address k thể thay đổi. Từ khóa immutable khiến cho biến chỉ có thể khởi tạo giá trị ban đầu or trong constructor 1 lần thôi. Và khi ta gọi hàm gì ở 1 contract nào thì thay vì v, ta khởi tạo contract này truyền vào địa chỉ contract đó. R gọi thông qua địa chỉ contract này. Hàm k tồn tại sẽ delegatecall sang địa chỉ là implementation. Ở VD này chả có ứng dụng gì

Mở rộng hơn là proxy dùng để update contract. Nó nhận vào địa chỉ của contract cần dùng và sẽ delegatecall gọi các hàm trong đó; Khi đó bộ nhớ của contract sẽ lưu thêm các biến của contract mà nó gọi vào delegatecall cùng thứ tự bộ nhớ như contract đó; Nên nhớ là contract proxy k hề có các hàm hay biến nào giống như contract SampleLogic1 nhưng ta vẫn có thể gọi hàm(sẽ chạy vào code của SampleLogic1) và lưu state(ở trong Proxy nhưng giống như SampleLogic1); Do đó nếu dùng remix thì phải dùng At Adress để thao tác còn trong code JS thì gọi được bình thường(vì nó gọi vào fallback); Nên nhớ do state chỉ được lưu trong bộ nhớ tại contract có 1 địa chỉ duy nhất là contract proxy nên các biến được lưu ở 1 vị trí k đổi và khi ta chuyển sang contract khác thì ta chỉ đổi logic còn data vẫn lưu ở trong contract proxy đó mà thôi; Trong contract ta có dùng 1 biến là _IMPLEMENTATION_SLOT là vị trí bộ nhớ mà khi cần lấy ta dùng sload assembly để tránh xung đột lưu trữ(thực ra k qtr); Proxy có hàm upgradeTo để update địa chỉ contract mới mà proxy gọi; Sau khi gán địa chỉ contract thực thi cho Proxy thì bất cứ khi nào gọi hàm đó trong proxy sẽ luôn gọi vào hàm mới của nó; Do signature các hàm trong proxy và các hàm trong contract gốc phải khác nhau nên đôi khi họ thêm các số kiểu id vào cuối hàm trong proxy kiểu cố tình để đổi signature cho khác đi

Chú ý call có 2 cách: 
1) ContractOrInterface(<address>).<function>(<params>);
2) ContractOrInterface public CoI = ContractOrInterface(<address>); từ đó trở đi có thể gọi: CoI.<function>(<params>);

Để tạo 1 upgradable contract còn phức tạp hơn v nhiều. VD phải thêm Owner cho Proxy vì k thể để ai cũng upgrade contract của ta được. Ta có thể dùng các thứ implement sẵn từ openzeppelin. Thật ra contract kiểu trên khá ổn r, thêm ownable nx là dùng đc.

Khi tạo contract, nó thường tư duy kiểu kế thừa khi mà có thể dùng lại ở bất cứ giai đoạn nào. Chẳng hạn nó muốn thêm 1 tính năng mới cho contract cũ thì nó tạo ra 1 contract mới kế thừa contract cũ r viêt thêm các tính năng or override các tính năng cũ, r lại lồng kế thừa để thêm tiếp tính năng. Bởi vì có thể ta k muốn thêm tính năng đó mà về sau tự dưng lại muốn thêm 1 tính năng khác nx cơ thì vc kế thừa nhiều cấp bậc sẽ giúp tái sử dụng ở mức tối đa
VD: Proxy là 1 abstract class chứa hàm gọi delegatecall và gọi trong fallback -> UpgradeableProxy kế thừa Proxy thêm _IMPLEMENTATION_SLOT, load và set và upgrade địa chỉ. Tức là proxy ban đầu k có tính năng update và cái này làm nó có thể update -> TransparentUpgradeableProxy kế thừa từ UpgradeableProxy thêm tính năng admin là owner của contract mà chỉ owner mới được đổi địa chỉ, làm điều này bằng cách định nghĩa lại các hàm set cho thêm modifier ifAdmin là xong, admin cũng phải lưu qua 1 slot chứ k dùng 1 biến lưu -> DAIProxy là proxy dùng trong dự án của ta kế thừa từ TransparentUpgradeableProxy có thể thêm tính năng gì nếu thích
Ownable là contract giúp khi deploy thì sẽ được gán 1 owner là msg.sender và ta toàn quyền cho Owner làm gì nếu thích -> ProxyAdmin kế thừa từ Ownable và sẽ thực hiện các tính năng của TransparentUpgradeableProxy -> DAIProxyAdmin kế thừa từ ProxyAdmin có thể thêm tính năng gì nếu muốn 
=> Tại sao nó lại chia ra ProxyAdmin trong khi có thể dùng trực tiếp TransparentUpgradeableProxy. NN là vì TransparentUpgradeableProxy  chuyên implement các hàm admin nhưng hãy nhớ admin ở trong contract này chỉ có vai trò thực hiện các hàm liên quan của admin như đổi admin mới và upgrade cái địa chỉ contract implementation mới mà thôi. Các hàm khác không phải quyền admin sẽ k thể gọi được. Nên nếu admin mà cũng dùng proxy contract như người thường thì lúc gọi sẽ rất rối vì gọi xong k rõ đó là 1 chức năng của admin hay người thường vì code càng ngày càng nhiều lên mà. Do đó họ khuyến nghị là chỉ dùng 1 dedicated addresss(tk chuyên dụng) làm admin cho 1 contract mà thôi và tk đó k được làm chức năng gì khác. 
Còn vc họ tạo ra 1 contract ProxyAdmin là 1 contract thực hiện mọi hàm mà trong quyền hạn của admin. Để họ chia ra đối tượng user thì tương tác với contract gốc còn admin chỉ tương tác với mọi hàm trong ProxyAdmin mà thôi thì sẽ k còn nhầm lẫn khi admin gọi sẽ thắc mắc là hàm này quyền admin có được gọi hay k. 

contract Initializable là contract check 1 hàm initialize của contract(nếu có) sẽ chỉ được gọi 1 lần. VD: 1 contract set owner trong hàm initialize thì chỉ được gọi hàm đó 1 lần thì ta sẽ kế thừa để đảm bảo hàm đó chỉ được gọi 1 lần


Dự án Trava làm sao để upgrade:
Mỗi contract là 1 contract viết riêng và có 1 proxy riêng. Dùng proxy của hardhat và openzeppelin thì ta viết code logic vào 1 contract xong dùng proxy cho nó để deploy bằng hardhat thì cuối cùng nó sẽ show ra địa chỉ contract proxy và address trong frontend là address của proxy chứ kp address logic. Vc ta dùng trong remix cx là lấy địa chỉ contract proxy như v.
Thật ra là ta tùy ý viết trong script deploy. Vói vc deploy lần đầu tiên, ta sẽ gọi upgrades.deployProxy (upgrades là biến hardhat hỗ trợ proxy phải npm i về) là hàm của hardhat thực ra là tự động gọi deploy contract gốc và contract proxy và setImplementation hộ cho ta. Các lần sau ta sửa contract sẽ chạy script upgrade auction thì gọi hàm upgrades.upgradeProxy() thực ra cũng là gọi hàm setImplementation ngầm hộ ta. Bản chất k khác gì nhưng nó tạo ra các hàm tầng cao hơn giúp ta dễ sử dụng.

Khi muốn contract có khả năng upgradable thì khi dùng các thư viện có sẵn khác của Openzepplin mà là kế thừa (kp là thư viện) thì phải kế thừa các contract có tính năng upgradeable có sẵn của openzeppelin. Openzeppelin có làm 2 phiên bản ví dụ: ReentrancyGuardUpgradeable và ReentrancyGuard chẳng hạn
=> nên học hết các thư viện openzeppelin

Khi viết upgrade cần tuân thủ quy tắc: không được thay đổi biến. Nếu ta muốn thêm biến mới thì phải khai báo thêm ở cuối file. Nếu muốn thêm function mới thì nên thêm ở cuối file để phân biệt. Có thể tùy ý xóa function cũ thoải mái. Các function cũ muốn chỉnh sửa kiểu thêm tham số hay bớt tham số hoàn toàn được vì bản chất nó tạo ra 1 function khác hoàn toàn. Nên nhớ proxy contract nó gọi vào fallback nên thêm xóa có ảnh hưởng gì đâu
