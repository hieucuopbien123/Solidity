Variable trong Ethereum blockchain sẽ được lưu trong: 
Storage: permanent và var lưu trong đây gọi là state variable, được lưu trong blockchain
Memory: biến chỉ dùng khi function được execute

Function có 2 loại:
create transaction: change state var, đổi state của blockchain, trao đổi tiền làm thay đổi số dư mỗi người
no transaction: free to call, k đổi state of blockchain

2 cách lấy 1 state var: public để sol tự tạo getter, tự viết hàm getter cho nó. Ta nên để solidity tự tạo sẵn nếu k có nhu cầu dùng biến private. Nên tự viết getter khi muốn lấy return nhiều biến 1 lúc trong 1 hàm.

keyword pure và view giống const sau hàm của C++ v, ta declare kiểu sẽ k thay đổi bất cứ state var nào trong sol:
pure: k đổi state của blockchain và cx k đọc bất cứ state var nào
view: k thay đổi state của blockchain
=> có từ khóa public thì người dùng có thể tương tác. Nếu function có view or pure tức là k đổi state thì function đó chỉ có màu lam và cho phép ta xem giá trị trả về. Các function k có view or state thì là transaction tốn gas và có màu cam or đỏ. Hàm số k có view hay pure(là 1 transaction tính gas) thì k thể return giá trị.

Trong remix mặc định mỗi account có 100 ether và gas limit là 30000000. Mỗi khi ta ấn deploy thì account nó spend 1 lượng ether nhỏ là phí gas đó. Sau đó ta ấn các nút màu cam or đỏ thì đó là các giao dịch ta thực hiện sẽ tiếp tục trừ 1 lượng ether. Smart contract được lưu trong block và công khai ai cũng có thể truy cập. Đầu tiên ta deploy contract lên mạng blockchain lưu vào 1 block bằng 1 tài khoản(tk bị trừ 1 lượng ether nhỏ). Xong 1 tài khoản khác lại vào block đó thực hiện 1 giao dịch thay đổi state var hay state blockchain(ấn nút cam or đỏ trong remix), thì tk của họ cx bị trừ 1 lượng ether nhỏ là phí giao dịch. Như v ai cũng truy cập được vào smart contract là như v. Nếu ta tạo 1 ứng dụng đặt cược và deploy lên blockchain thì mn khác vào thực hiện giao dịch(ấn cam or đỏ) và mọi thứ diễn ra y hệt cơ chế bth.
nếu ta lấy transaction cost + lượng ether còn lại sẽ ra lại số 100 tổng ban đầu

Khi giao dịch thông thường ta sẽ được set gas price, trong remix mặc định gasprice là 1 wei có thể lấy bằng: tx.gasprice
=> tức là remix cho ta dùng gasLimit*1 là chỉ dùng bằng lượng gas limit thôi

Lưu data trên blockchain sẽ ngốn tiền, ta chỉ nên lưu data nhỏ còn data lớn như ảnh thì có thể dùng IPFS, nó là p2p file storage bất cứ ai cũng có thể truy cập vào dữ liệu qua mã hash: upload data cần lưu vào blockchain to IPFS(free)-> nhận hash-> lưu hash vào smart contract-> mọi người vào smart contract muốn lấy data sẽ có hash-> dùng hash đó vào IPFS lấy dữ liệu: https://ipfs.io/ipfs/<hash>

Khi gas bị vượt quá gas limit thì mọi state change sẽ undone nhưng gas vẫn bị trừ đi-> ngăn các hàm chạy vô hạn
Gas limits có 2 giới hạn: 1 là gas limit ta tự set trong tài khoản để thực hiện mỗi transaction và block gas limit do network set lượng gas cho cả block

private: chỉ truy cập trong contract
internal: truy cập trong contract và child của nó
public: truy cập trong contract, child, others transactions and accounts
external: chỉ truy cập bởi others transaction, contract và child k truy cập được -> external state variable k tồn tại Vd interface k đc có state var
=> dù v k được dùng private để lưu các thông tin nhạy cảm vì dù là private, lưu trong blockchain là công khai nên sẽ có các cách khác để lấy được giá trị đó

uint nằm từ 0 -> 2^256 - 1 
=> vượt quá sẽ quay vòng lại ban đầu overflow -> tương tự có underflow -> bản mới k còn 

Từ khóa payable cho phép 1 transaction gửi nhận ether
Những gì viết trong solidity không phải là thứ mà người dùng nhìn thấy, nếu build app, ta sẽ cần xây dựng 1 giao diện người dùng nhúng code solidity này, khi đó event rất quan trọng cho vc debug

Pb transfer, send, call:
transfer khi dùng để send ether sẽ tiêu tốn 2300 gas; nếu nhận ether bằng 1 trong 3 cách này đều gọi vào 1 hàm đặc biệt là hàm fallback. Nếu có bất cứ 1 lỗi nào khiến transaction fail sẽ throw error;
send giống transfer chỉ khác là trans fail sẽ trả ra bool chứ k throw error;
call ta có thể dùng hết gas or tự xđ lượng gas dùng, cx return bool và bytes lưu data=> ưu tiên dùng call vì lượng gas sẽ phụ thuộc vào các operation khác nhau tiêu gas khác nhau nên để fix sẽ k tối ưu; transfer và send cố định 2300 gas nên ta sẽ k thể làm đc gì nhiều phức tạp.
VD: 1 contract nhận tiền và gọi vào 1 contract khác tiêu tiền mà đều dùng hàm send-> thì họ sẽ chỉ dùng đc trong phạm vi 2300 gas;
Dùng call sẽ là 1 guard cản re-entrancy hack

dùng msg.value thì func phải có payable or sẽ lỗi

library như contract chỉ khác là k có storage nên k có state var, k có ether=> dùng lib giúp tránh trùng lặp code, tái sử dụng, thêm tính năng cho các kiểu dữ liệu
trong thực tế, người ta thg dùng các open source lib có sẵn trên github uy tín đc nhiều dev sử dụng. Vd: thư viện SafeMath của openzeppelin-contracts
lib có public, external, ta deploy lên 1 block, các contract khác sẽ dùng lib-> khi compile sẽ link lib đó vào contract và tái sử dụng nên k tốn gas khi deploy ở nh contract khác nhau(chỉ k tốn khi deploy thôi)-> deploy contract lên 1 block khác và sử dụng đc function của lib đã từng đc deploy ở 1 block xa -> Lib nên luôn compile cùng, embed vào là được

Mọi transaction đều có nonce, nonce của transaction là số lượng transaction được gửi từ 1 address. Mỗi lần gửi 1 transaction, nonce sẽ tăng lên 1. Tuy nhiên vì 1 trans có thể valid hay k valid nên sẽ có quy tắc: trans với nonce là 2 k thể được đào nếu chưa sent transaction có nonce là 0 or 1 trước đó.
=> điều này ngăn cản double-spending vì nonce sẽ xác định thứ tự của transaction
=> nó khác với nonce của block dùng cho thuật toán POW trong bitcoin blockchain

Để liên kết 1 trang web với ví meta mask(để dùng các chức năng của ví), chỉ cần mở extension và liên kết với trang web.
Cách khác là dùng JS: ethereum.enabled(); or phiên bản mới dùng: ethereum.request({ method: 'eth_requestAccounts' }) sau đó có thể dùng mọi lệnh js để thao tác với meta mask ở trang web đó. 1 số trang như remix thì phải reset lại web mới thao tác đc với meta mask
Để sign 1 transaction bằng address account trong ví của ta và verify nó: phải có 1 ví meta mask-> vào ví bằng web: https://www.myetherwallet.com/wallet -> vào message r sign và verify. Signature sẽ ở dạng json.
=> cách sign với code: ethereum.request({ method: "personal_sign", params: [<account sign>, <hash>]}).then(console.log); 

Token swap là việc di chuyển token từ 1 blockchain này sang 1 blockchain khác. Vd: chuyển token ở blockchain bitcoin sang ethereum vì blockchain ethereum cung cấp khả năng mở rộng tốt hơn cho dự án của họ.
Uniswap là giao thức hoạt động trên Ethereum để hoán đổi token, là sàn giao dịch phi tập trung phổ biến nhất hiện nay.

Thanh khoản(Liquidity) là từ chỉ mức độ lưu động của 1 tài sản bất kỳ có thể mua bán trên thị trường mà giá k bị ảnh hưởng nh. Hay là khả năng chuyển đổi thành tiền mặt của 1 tài sản.
Nói chuẩn hơn, 1 thứ có thanh khoản cao thì có thể dễ dàng bán nó vì bên nhu cầu mua nó là đủ cho vc bán. Ngược lại 1 thứ gì đó t muốn bán ra 5 phần, mà thị trường lại chỉ cần mua 4 phần thì thứ đó có thanh khoản thấp, vc trao đổi là rất khó khăn. Do tiền mặt nhu cầu kbh đổi mà giá trị lại cố định nên có thanh khoản cao nhất
VD: Bob có 5 token, thấy giá tăng, Bob bán ra kiếm lời
-> thị trường có đủ ng mua-> Bob nhanh chóng bán hết-> giao dịch của Bob k ảnh hưởng đến thị trường vì thị trường có đủ thanh khoản để thực hiện giao dịch của Bob
-> thị trường k có đủ ng mua-> họ thấy rằng: giá cao thế thì ai mà mua-> Bob phải hạ giá token xuống để bán đc và vc làm đó sẽ ảnh hưởng đến giá token đó hiện tại trên thị trường
-> TH lý tưởng là giá đặt mua và giá chào bán là ngang nhau
-> tính thanh khoản vô cùng quan trọng quyết định ta có thể gia nhập hay thoát khỏi thị trường. Thanh khoản cao đảm bảo giá cả ổn định vì giao dịch luôn có đủ thanh khoản để thực hiện nên sẽ k ảnh hưởng giá cả, công bằng cho mọi người(người bán sẽ bán với giá cạnh tranh k bị thua lỗ), người mua sẽ trả giá cao hơn; thời gian giao dịch nhanh hơn.

Automated Market Maker(AMM) là công cụ đem lại tính thanh khoản tự động cho các sàn giao dịch. Nó là 1 sàn giao dịch phi tập trung vượt trội. VD: uniswap, sushiswap,..
Các sàn giao dịch thiếu đi sự ẩn danh vì tạo tk người dùng đã phải cung cấp thông tin cho sàn và nếu muốn, người ta vẫn truy ra được danh tính của chủ tk. Chưa kể sàn bị hack, lộ danh tính người dùng, giải quyết với AMM. 
Thông thường, giá đặt mua và đặt bán là do người dùng đặt ra và treo lên, nếu ai có nhu cầu mua or bán thì lệnh khớp và giao dịch thực hiện-> AMM sẽ k có lệnh nào được đặt và giá mua, giá bán là bằng nhau và ai có nhu cầu sẽ đặt lệnh và khớp ngay lập tức-> giá của loại tiền sẽ được chỉnh theo thuật toán
=> tức là trong AMM k hề có lệnh mua bán, nó chỉ là việc gửi tiền vào pool chứa 2 loại tiền điện tử và rút ra 1 loại-> vc rút tiền sẽ ảnh hưởng giá tiền. VD: 1 pool có 1000 USDT và 1000 DAI(2 loại token). Ta gửi vào đó 100 DAI và muốn rút ra USDT-> tỷ lệ sẽ là 900USDT và 1100 DAI-> bh ta muốn rút ra 90 USDT ta sẽ phải cung vào 110 DAI, tức là giá của USDT đã tăng lên. Vc tăng giá đó là do thuật toán điều chỉnh. 
=> số tiền ta rút là lấy từ pool. Nếu cố ý rút hết tiền trong pool ra thì giá của 1 trong 2 sẽ tăng lên vô hạn, khiến cho người đó bỏ nhiều tiền ra để đổi lấy 1 đồng tiền có giá cao hơn nhưng số lượng lại ít hơn, thành ra chả khác gì ban đầu.

Liquidity pool: AMM hoạt động phải có 1 nguồn cung thanh khoản có sẵn nghĩa là phải có người cung cấp cả 2 loại tiền điện tử 1 lúc vào pool để ng dùng trao đổi khi có nhu cầu. Bù lại họ được khoản phí phát sinh (thg là 0.3%). Như v người dùng cung cấp thanh khoản cũng có thể hưởng phí giao dịch.
Sàn thông thường có quá nh khiến cho các loại token kém phổ biến có tính thanh khoản thấp, việc trao lợi nhuận cho người cung cấp thanh khoản sẽ tạo động lực để họ đưa các đồng token kém phổ biến lên, giải quyết vấn đề các đồng coin kém phổ biến bị thiếu thanh khoản
Uniswap dùng phép x * y = k với x, y là số lượng mỗi loại còn k là hso. Tức là ta càng lấy nhiều 1 loại tiền thì giá của tiền đó càng tăng lên và khả năng lấy tiền của ta sẽ giảm dần đi vì k đủ tiền để đổi nx. Công thức trên cho thấy tỉ lệ rằng 1 cái giảm thì 1 cái tăng tức giao dịch càng nhiều, thanh khoản càng tăng, giá càng tăng nhưng đồng còn lại kbh giảm về 0 vì đặc tính phép nhân nên giá của đồng kia sẽ tăng vô hạn. 
Những người gửi tiền vào pool thanh khoản có thể lỗ vì người dùng luôn lấy đi đồng coin tăng giá và để lại đồng coin giảm giá. Nếu ng cung thanh khoản tạo với các cặp tiền điện tử là stable coin thì sẽ tránh mất mát này.

AMM có thể dùng bất cứ lúc nào miễn có ví liên kết với nó mà k phải xác minh danh tính nên ẩn danh; giá cả xác định theo thuật toán và thực hiện tự động với smart contract nên đặt lệnh sẽ luôn đc khớp và ngay lập tức; coin giao dịch trực tiếp mà k giữ lại ở sàn giao dịch nên k bị hack

Pair là cặp tiền trong pool. Ta có thể tạo ra 1 pair và trở thành người cung thanh khoản đầu tien của pool này.

EVM(Etherium virtual machine) là máy ảo blockchain. Là môi trường thực thi bytecode của smart contract. Mỗi node trong mạng sẽ vận hành EVM và chạy các hợp đồng thông minh.

Dev viết solidity code tạo smart contract-> compile thành bytecode-> deploy vào mạng etherium-> Mỗi node trong mạng là 1 máy tính chạy program Geth nhận được bytecode đó(Mỗi node sẽ có 1 bản copy của bytecode)-> geth là implementation của Etherium protocol chứa EVM-> EVM sẽ run bytecode(như 1 CPU ảo) để thực hiện các tập lệnh là ngôn ngữ máy-> tạo ra 1 result-> result khiến cho current state change. Etherium blockchain có 1 state tại mỗi thời điểm lưu account, smart contract,.. ở thời điểm hiện tại. Các node sẽ keep track cái state đó. VD smart contract viết ban đầu thay đổi quyền sở hữu của tài sản nào đó thì 1 state mới ra đời r-> mọi node cập nhập state mới tức là lệnh được thực hiện xong

EVM như 1 distributed state machine, nó cập nhập trạng thái machine liên tục và phân tán trong mạng. Mỗi node trong mạng có 1 EVM như v. Khi state đổi, vd ở trên quyền sở hữu số coin này được chuyển cho người khác tức là transaction đc thực hiện đó. 

Bitcoin k dùng state machine mà là stack machine-> Khi mọi node trong mạng bitcoin nhận transaction-> nó tạo block mới, thêm trans vào và thực hiện xác minh. Khi thêm trans vào nó giải mã unlocking script có redeem script-> Nó thực hiện trên 1 stack như v push dần vào. Còn state machine có thể coi như 1 hàm chuyển đổi trạng thái nhận bytecode đầu vào và đầu ra là trạng thái mới.

Solidity là ngôn ngữ hướng đối tượng bậc cao chỉ dùng để viết smart contract chạy trên Ethereum, sau này có thể nâng cấp chạy trên các blockchain khác. Biên dịch Solidity sang EVM bytecode với Solidity compiler. 
Đuôi file là .sol

Rust cũng lập trình smart contract, khi đó nó chạy trên Solana or Near chứ k chạy trên Etherium. Đó là 2 hệ sinh thái chạy bằng rust lớn nhất. Có nhiều ngôn ngữ lập trình smart contract.

Etherium là 1 phần mềm nên tảng mã nguồn mở. Mọi người có thể tải source về và chỉnh sửa r compile để dùng theo sự chỉnh sửa của mình or dùng bản gốc or contact với bên phát hành để đóng góp chỉnh sửa. Ethereum hỗ trợ mọi người tạo ra token, smart contract riêng của họ để phát triển doanh nghiệp, dự án riêng của họ. 

Remix là 1 browser-based IDE online(bao gồm text editor và compiler) cho smart contract, tại https://remix.ethereum.org dùng deploy sản phẩm luôn. Remix hiện tại chỉ dùng để lập trình cho solidity.
Cách chạy: Compile-> chọn account, môi trường, Gas limit (để mặc đinh) -> deploy
Remix là môi trường mô phỏng để phát triển phần mềm thôi, mọi tài khoản trên đó, lượng gas đang có đều là tự có để kiểm thử. Nếu muốn dùng ether thì có thể chỉnh giá trị value để giao dịch.

Smart contract: tiny program trong blockchain. Nó có các tương tác như bth kiểu set dữ liệu, hiển thị dữ liệu, trao đổi giữa 2 người. Khi smart contract được deploy lên blockchain và mọi người dùng nó để tạo contract, nó sẽ store trong block-> chính vì nó là 1 phần dữ liệu của block nên bất biến, k ai hack vào và sửa code đc cơ chế tương tự bitcoin blockchain. 
Khi dùng solidity tạo ra 1 smart contract-> compile và deploy nó lên etherium blockchain, EVM chạy nó cho kết quả cập nhập state-> ta có thể dùng smart contract đó cho dự án r.

Ethereum đang phát triển 1 ngôn ngữ lập trình smart contract của riêng nó là FE. 
Mọi thứ về tốc độ truyền tải hay hiệu suất thì Blockchain Etherium đã làm hết r, tối ưu hết r. Lập trình smart contract chỉ cần tạo và thực hiện rất đơn giản

1 Ether (ETH) = 1.000.000.000.000.000.000 Wei
Gwei = 10^9 wei. Tương tự có Kwei, Mwei
Gas là 1 đơn vị đo lường trên Ethereum. Các hoạt động trên Ethereum cần 1 lượng năng lượng tính toán nhất định. Các thợ đào có nhiệm vụ sử dụng năng lượng để hoàn thành hoạt động đó => Gas ra đời để đo lường lượng năng lượng mà thợ đào bỏ ra để có được phần thưởng tương xứng. 
Mạng lưới Ethereum sẽ k hoạt động nếu k có Gas, đơn giản vì k có gì đo lường để thưởng cho đóng góp của thợ đào. 
Để mạng lưới Ethereum được mở rộng thì mức phí Gas nên càng nhỏ càng tốt. Nó ra đơn vị nhỏ như v để tính fee thôi.
VD: 1 người deploy smart contract lưu trong 1 block trong blockchain tốn 3000 gas, 1 người tạo ra 1 transaction update variable của contract đó lưu vào 1 block khác của blockchain tốn 200 gas.
Giả sư hàm update đó gán giá trị của state var bằng 1 giá trị khác là "Hello A!" => nó sẽ tính số operations thực hiện trong cái transaction đó. VD ở đây gán từng ký tự của string cho biến, mỗi ký tự là 1 operation thì phải thực hiện 8 operations. Khoảng 5 gas cho 1 operation thì tổng tốn 40 gas cho việc gán = đó. Tương tự mỗi dòng của transaction sẽ đều tốn gas và tính được tổng gas của trans
Vd: tính tổng x+y tốn 10 gas; uint x = 1 tốn 5 gas => Chi tiết được viết trong ethereum white paper
Sách trắng là tài liệu cung cấp thông tin phát hành bởi 1 tổ chức để quảng bá cho sản phẩm, dịch vụ của họ. Có thể là tài liệu bán hàng, tài liệu kỹ thuật mô tả chi tiết 1 sản phẩm, phát minh, là công cụ đo lường phản ứng của công chúng, thuyết phục khách hàng,.. 
Khi thực hiện trans sẽ luôn có gas limit ta tự set, nếu gas vượt quá thì trans đó sẽ bị abort. VD 1 function while(true) vô hạn sẽ ngốn hết gas và báo error. 
Gas limit là số gas, gas price là giá của gas bằng coin theo ether chẳng hạn. Dùng nhiều gas price thì trans được xử lý cx nhanh hơn => tức là set gas và set gas price(là price per gas) => fee = gas*gas price
Cơ chế: VD tk có 7000 gwei, set gas limit là 3000 và gas price là 2gwei-> ấn deploy tài khoản trử đi 6000 gwei là tối đa cần để send trans-> trans thực tế chỉ cần 1000 gas tức 2000 gwei-> 4000 gwei được gửi trả lại cho ta.
=> fee là gas phụ thuộc vào data lưu trữ trong smart contract và operation.

-input of a public function k thể là multidimensional array dynamic size or mapping. output bị hạn chế hệt input => chú ý là chỉ giới hạn với public function vì privavte function chỉ ta dùng ta kiểm soát được hết thì k bị hạn chế gì hết
-Có nên return output of function là arr với size k fix? No, vì ta tưởng rằng 1 hàm số khi get 1 giá trị thì k tiêu tốn gas nên k sao=> sai vì hàm số get k thôi thì vô dụng còn gì, hàm get thường được dùng để lấy giá trị của state var.
VD: Contract A có hàm get return 1 address[] có 1 tỷ phần tử. Nó là public function tưởng là ổn r. Xong 1 ông nào đó tạo contract B gọi hàm get của contract A, vì hàm này public nên contract B gọi được. Contract B sử dụng hàm có tính gas để lấy hàm get 1 tỷ địa chỉ của A-> toang luôn vì contract B sẽ cần quá nh gas-> tức là expect là A k tính phí nhưng B gọi vào A qua 1 hàm tính phí thì error nên trái với predictable-> hàm A trả 1 tỷ địa chỉ xem ra chả dùng được ở đâu hết nên là vô dụng k nên dùng => nói cách khác 1 hàm số trong smart contract thì phải luôn kiểm soát được lượng gas k bh là vô cực or quá lớn.

mapping(uint=>uint) chỉ dùng trong storage vì nó chứa nested mapping. Tức chứa thêm giá trị ánh xạ phải lưu trong storage. 

Visibility: external, private, public, internal
Behaviour: view, pure, payable
-view là báo hiệu 1 function sẽ k đổi state của blockchain, state của blockchain coi là đổi khi: gán biến state var, phát event, tạo contract mới or xóa contract, gửi ether, mọi function k dùng view or pure, low-level call, dùng inline assemly chứa opcodes.
Hàm view k thể đổi state của function, ta có thể tạo ra các tính toán phức tạp nhưng miễn k đổi state là đc. Tức nếu 1 hàm view gọi 1 hàm k view thì k đc vì gọi hàm k dùng view (kể cả bên trong chả gán hay đổi state gì khác) vẫn coi là đổi state r.
-pure k đổi và k read state luôn, read from state là khi: lấy giá trị của state var; truy cập vào <address>.balance(tức số dư của 1 address nào đó); truy cập vào các biến global như block, tx,msg (trừ msg.sig, msg.data); gọi bất cứ hàm nào k có pure; dùng inline assemly chứa opcodes. 
=>pure function chỉ gọi được pure functions khác bên trong
Nên có pure or view trong các function cần có, các compiler sẽ tự động warning các function có thể dùng nó nếu ta quên

Có thể tạo nhiều contract 1 dự án và deploy tùy ý

Phân biệt: - A tạo 1 transaction có transaction hash là X gửi Ether cho B. 1 transaction bình thường như v thì Ether scan sẽ hiện:
From: A; To: B; Transaction Hash: X; với A, B là address người gửi, người nhận; address đó là account address or wallet address là duy nhất của 1 user.
- Nhưng smart contract thì sẽ khác. VD: 
A tạo ra 1 transaction created 1 contract: From: A; To: <Contract hash B>; Transaction Hash: X(transaction hash nó klq j đến địa chỉ ta sẽ kqt tới nó nx); => Bởi vì mọi transaction trong blockchain đều là gửi từ 1 cái này sang 1 cái khác nhưng đâu phải giao dịch nào cũng có người nhận đâu. VD tương tác với smart contract thì người nhận sẽ là địa chỉ của contract. Khi ta deploy hay chạy 1 hàm kp view or peer thì đều là tạo 1 transaction From: người thực hiện hàm; To: địa chỉ contract
- Xét TH tạo token mới: 
Trong rất nhiều contract thì có contract sẽ tạo ra coin. Trong ether scan khi search bất cứ 1 đồng coin nào bằng tên của nó, thông tin của nó sẽ luôn có 1 mục là contract-> đó là contract tạo ra coin đó. Bên trong contract đó có Token Tracker là tên đồng tiền contract đó sinh ra.
Đầu tiên: A tạo ra 1 transaction, transaction này tạo 1 contract From: người gửi; To: địa chỉ contract; và contract đó có coin luôn vd như đồng USDC
=> Khi 1 transaction tạo contract, contract đó ra đời sẽ gắn vào 1 địa chỉ riêng công khai để mn có thể refer tới nó được; địa chỉ này hoàn toàn là tự có như 1 node trong giao dịch. Tức là có thể nhận tiền và gửi tiền được như 1 node, chỉ có điều nó là smart contract. Ta chưa thực hành gửi tiền từ smart contract cho người khác. 
=> Như v khi search trong ether scan, ta sẽ bắt gặp 3 thứ: 1 là coin-tên coin, 2 là contract-địa chỉ contract; 3 là address-địa chỉ address là hexa; Như v k có gì bất ngờ khi bắt gặp 1 contract có địa chỉ riêng. 1 contract có thể gửi từ address này sang address khác. 
=> Thông thường thì 1 token có thể tạo ra ez như v nhưng nhiều cái như DAI Stable coin chẳng hạn thì A tạo contract From A To Contract Address A, và tạo contract from A to Contract Address B(thế là có 2 contract address); Contract Address A lại tạo 1 contract gửi từ A vào Contract Address B(vì contract address như 1 node bth r), để làm được v thì đơn giản lập trình cho contract address A gửi vào địa chỉ contract address B mà thôi ez đồng thời trong transaction đó lại tạo 1 contract D sinh coin DAI. Tùy biến mọi thứ đc. Sau khi deploy xong, người khác vào dùng stable coin đều From họ To address contract (đã tạo ra stable coin)

Cơ chế dùng merkle tree để kiểm tra 1 transaction có nằm trong 1 block hay k: lấy tất cả trans-> tạo merkle tree-> nhét merkle root vào block. Giả sử có 8 trans và trans 3 nằm ở vị trí thứ 3 của trans trong merkle tree. Để check trans 3 có nằm trong tree hay k? kết hợp với trans 4 tạo H34-> kết hợp với H12 tạo H1234, kết hợp với H4567 tạo H12345678
=> từ 8 trans, bh ta chỉ cần 4 trans để tạo lại merkle root từ đó so sánh, nếu merkle root trùng với merkle root trong block thì trans thứ 3 có nằm trong block. 
Tức ta chỉ cần log2(n) để tạo ra merkle root-> VD 1 full node bth có 1000 trans, ta bh chỉ cần lấy log2(1000) tức ~10 trans để check 1 trans có nằm trong tree hay k chứ kp download cả 1000 trans

Hàm băm Keccak-256 đang được dùng bởi Ethereum, SHA256 được dùng bởi bitcoin, chúng khác nhau nhưng đều tạo ra mã băm 256 bit. Họ không dùng MD5 vì kháng va chạm đã bị phá vỡ sau 2^21 lần băm.
SHA3 trước đây gọi là keccak chính là hàm Ethereum dùng-> keccak256 là hàm global trong solidity luôn, truyền vào 1 string là nhận ra 1 chuỗi 256 bit thôi; bytes32 là kiểu chuỗi kích thước 32 bytes có thể dùng lưu kết quả của keccak
Solidity cung cấp 1 loạt các chức năng mã hóa ABI; hàm abi.encode() sẽ xác định mã hóa các đối số đã cho; abi.encodePacked() thực hiện mã hóa đóng gói các đối số đã cho => merkle tree hash các transaction dùng: keccak256(abi.encodePacked(<trans1, trans2>);

1 biến là private sẽ chỉ cản các derived contract khác truy xuất tới state var đó và thay đổi thông tin mà thôi. K ảnh hưởng tính công khai minh bạch của blockchain vì mọi người vẫn có thể xem nó công khai.

MetaMask k còn hỗ trợ injected web3 nx. Ta kết nối metamask với trang web r dùng console để gõ code web3 sẽ k hoạt động. 

2 token cùng tên nhưng địa chỉ trên blockchain database khác nhau là khác nhau
mỗi token chỉ được deploy 1 lần, nếu deploy nhiều lần thì ra các token khác nhau
Nếu muốn thêm hay bớt token thì dùng burn và mint, nếu muốn update token thì dùng upgradeable chưa học là khả năng cập nhập code của smart contract. Chứ kp là cứ sửa r deploy lại vì khi đó ra đồng coin mới. Vì deploy thì ra rồi thì bất biến k tác động được nx, chỉ gửi các trans để thực hiện các hàm public đổi state của blockchain mà thôi. 
