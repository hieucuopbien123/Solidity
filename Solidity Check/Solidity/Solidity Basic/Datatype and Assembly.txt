Data type trong solidity:
Trong solidity có kiểu integer là int, int8 đến int256 và tương tự uint.
int mặc định là int256. Số đằng sau biểu thị số bits mà nó có thể dùng để biểu diễn. Mỗi bits biểu diễn 0 or 1 đó. 
Vd: int8 chạy từ [-2^7 -> 2^7-1] vì signed nên 1 bits dấu. Do đó uint sẽ biểu diễn ra khoảng dương cực kỳ lớn, mấy chục số 0.

Trong solidity còn có kiểu dữ liệu fixedMxN và ufixedMxN là số lượng các số phần thập phân nhưng kiểu này chỉ tồn tại nhưng k thể gán và lấy giá trị được. Các function dùng nó sẽ biến mất. 1 kiểu dữ liệu tồn tại nhưng chả bh dùng.

Trong solidity k có floating point và ta luôn dùng đơn vị nhỏ nhất của tiền tệ để quy đổi ra làm mất phần thập phân như wei, cent.

Dùng array, bytes và string là các thứ giúp lưu các dữ liệu cùng kiểu:
1) Array: VD: string[10] str; or string[] str; với mảng động
Array nó luôn chặt chẽ: VD: int[] public arr = [-1, 2, 3]; => đúng
uint[] public arr = [1, 2, 3]; => đúng nhưng int[] public arr = [1, 2, 3]; => sai vì dùng int thì trong mảng phải có phần tử âm, nếu k sẽ bị lỗi cannot convert to...
Khi dùng các kiểu như string hay array như int[] trong 1 function đều phải specific datalocation. VD trong hàm dùng: int[] memory = insideVar = storageVar; or input vào hay return cx v.
Khi tạo 1 array mới trong 1 function thì array đó phải fixed size: 
Vd: int[2] memory a; or int[] memory a = new int[](<số lượng phần tử>);
Chú ý: int[2] memory h; khi dùng trong hàm mà ta return nó thì phải dùng returns(int[2] memory) còn nếu dùng new thì k cần. Nếu thực sự cần tạo 1 mảng data thì nên dùng new là chuẩn.
Khi returns 1 mảng thì gọi hàm sẽ xem được toàn bộ phần tử trong mảng luôn
2)string lưu chuỗi. string trong solidity bh k còn là 1 mảng các char nx mà nó coi đó là 1 cục luôn nên ta chỉ lưu data và lấy ra. Nhưng nó vẫn là 1 kiểu chuỗi và trong function vẫn phải specific data location.
3)bytes: câu hỏi đặt ra là string nó lưu thành 1 cục thì muốn iterate từng phần tử của string thì k dùng được mà phải convert sang kiểu bytes.
bytes là kiểu dữ liệu lưu được như string nhưng lại có dạng array nên iterate từng phần tử đc.
có bytes, bytes1, bytes2,.., bytes32 vì 1 byte bằng 8 bits nên nó lưu max đến 256 bits cũng như int256. byte là alias for bytes1. Còn bytes là alias của byte[] tức là kiểu bytes có kích thước động dài bao nhiêu cũng được, ta có thể dùng nó lưu chuỗi dài vô tận. Tuy nhiên bytes có khác với byte[] là nó tốn ít gas hơn, nên bh chả ai dùng byte[] nx mà chỉ dùng bytes (lưu 1 ký tự tốn tầm 3 gas).

Cơ chế của bytes: khác với việc lưu số thì số bytes quy ra bits là biết được rằng khoảng giới hạn của số int đó là từ bao nhiêu đến bao nhiêu. Khi lưu thành chuỗi char thì mỗi char nó chiếm 1-2 bytes tùy ngôn ngữ, ở trong solidity là 1 byte. Tức là dùng kiểu byte chỉ lưu được 1 ký tự còn bytes thì lưu max 32 ký tự mà thôi.

Cách dùng: Do bytes nó lưu literal string, nhưng trong bộ nhớ nó sẽ lưu dưới dạng bytes có prefix là 0x nên khi khai báo 1 biến bytes, ta có thể truyền vào "literal string" or dạng bytes 0x cx đc. Vd: bytes1 public data = "H" => gán là "HH" sai luôn vì chỉ được 1 ký tự or bytes1 public a = 0x65;
Nhưng khi bytes memory là tham số truyền vào của 1 function thì ta k được truyền literal string mà phải đúng là bytes prefix 0x
=> Tức là bh có các cách truyền vào hàm ở giao diện là: 0x.. cho bytes, [,,] cho mảng, "<số/text>" cho string và int
Do đó nếu k truyền vào ký tự gì cả thì bytes của null là truyền vào 0x00

Kiểu bytes nó có format riêng, giống như trong qt có QByteArray cx lưu kiểu khác có quy ước, ta k cần biết cách nó lưu ntn. 

bytes được hỗ trợ bởi rất nhiều hàm còn string thì chỉ lưu 1 cục. Nên ta có thể convert string <-> bytes để thao tác như: 
string str = string(<biến bytes>); or bytes bts = bytes(<string>);
Từ đó ta có thể dùng rất nhiều hàm trong solidity thao tác với bytes như abi.encoded or keccak256,.. để duyệt qua từng ký tự or nối string với nhau,..

Phân biệt bytes và bytes32: 
bytes là kích thước động và bytes32 là kích thước tĩnh. Trong solidity, các biến kích thước tĩnh hay fixed thì khi lưu k cần phải specific nơi lưu trữ nó, tự biết là lưu ở memory or storage(kích thước fixed thì kích thước nó được xác định nên lưu vào k sợ bị tràn bộ nhớ). Còn các biến kích thước động như bytes, array, string, or byte[](chính là array) thì phải nói rõ nơi lưu (vì có thể kích thước quá lớn gây tràn bộ nhớ nên phải specific nơi mà có thể lưu được đủ).
Ví dụ dùng bytes32 bts = "H"; thì nó sẽ dùng hết 32 bytes để lưu dẫn đến kéo theo hàng đống số 0 đằng sau. Còn dùng bytes bts = "H"; thì bts sẽ tự dùng đủ số bytes để lưu "H" mà thôi.
=> do đó trong hàm số, Vd ta returns(bytes memory) thì returns bytes("Hello");
=> Và điều đặc biệt là kích thước tĩnh hay động nó có ảnh hưởng đến việc dùng hàm. VD: động thì dùng được hàm push của array để thêm element vào array, nếu mảng tĩnh thì k dùng được hàm push mà chỉ có gán

Phân biệt calldata, memory: 
calldata: chỉ dùng là đầu vào của EXTERNAL function là dynamic size. Dùng calldata thì ta có thể thực hiện cắt cái biến đó với [<from index>:<to index>]. calldata không thể chỉnh sửa như memory. 
=> dùng calldata thì cắt được dữ liệu của cả 3 type array, string và bytes

Từ khóa new: ta đã biết từ khóa new để tạo ra 1 instance mới của contract trong 1 contract khác. Ta còn có thể dùng nó để tạo ra 1 data mới trong function. 
Với bytes: bytes memory bst = new bytes(<số bytes>); => khai báo ô nhớ mới kiểu bytes, bên trong k lưu gì cả mặc định toàn số 0
Với array: int[] memory a = new int[](<số lượng phần tử>); => khai báo 1 mảng int bao nhiêu phần tử và mặc định tất cả các phần tử là 0
Với string: string memory a = new string(<số lượng phần tử>); => khai báo null string 1 lượng ô nhớ
=> khi khai báo với new thì phải specific số lượng phần tử. Khi dùng với string thì khai báo 10 phần tử nhưng dùng 100 phần tử cx đc, nhưng dùng với array thì chỉ đc dùng trong phạm vi đã khai báo vì string nó mặc định là phần tử luôn động còn array thì ta có thể quyết định nó động hay tĩnh.
VD: khai báo array với new trong 1 function thì array đó k dùng được hàm push. Nhưng khai báo k dùng new thì lại đc vì nó động. 
Lưu ý là trong 1 hàm số, khai báo array động cũng sẽ thành tĩnh nhưng nó hiểu v chứ k báo nên k dùng được push

Chú ý: 1 bytes bằng 2 con số bắt đầu tính sau dấu x. VD gặp 1 hàm số nhận vào kiểu bytes4 thì ta phải truyền đủ là "0x12345678" nếu k đủ các số thì sẽ revert lỗi INVALID_ARGUMENTS
