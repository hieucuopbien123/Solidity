Kiến thức NFT:
xét 3 hàm cơ bản của 1 NFT: chuyển NFT từ người này sang người khác; xem chủ của NFT hiện tại là ai; lấy đường link tới metadata của NFT;
Để NFT hóa tài sản thực ví dụ 1 căn nhà hay 1 lô đất thì NFT của tài sản đó phải có url đến 1 file chứa thông tin của lô đất đó, nó chứa các thứ như nhà quay hướng nào, bao nhiêu tầng, bao nhiêu mét vuông,... Ta có thể lưu thông tin đó vào state var nhưng thg là lưu trong ipfs và trả ra hash của nó mà thôi. Thế là biến được tài sản thực thành tài sản số, nhưng điều này chỉ thành hiện thực khi người ta chịu công nhận dùng blockchain đó để thay cho giấy tờ nhà đất và k vi phạm pháp luật.
IERC721 kế thừa IERC165(IERC là interface erc)
ERC1155 = ERC721 + ERC20 bởi vì ERC721 cho 1 số id với mỗi 1 tài sản cho nên 2 món đồ giống nhau(kp copy) thì sẽ có id khác nhau, còn ERC20 thì nó k chia id mà nó chỉ cho biết ở 1 địa chỉ đang sở hữu 1 lượng bao nhiêu cái gì đó.
VD: trong game có 1 vật phẩm, mà A sở hữu 8 cái, B sở hữu 3 cái mà vật phẩm này giống hệt nhau. Nếu dùng ERC721 thì mỗi vật phẩm đều có 1 id riêng. Nếu 1 ai mà sở hữu 1000 vật phẩm này thì sẽ lưu 1000 id khác nhau và điều này là k cần thiết. Để tránh được điều này ERC1155 ra đời. Nó sẽ tạo ra NFT cho vật phẩm đó kiểu mỗi loại vật phẩm có 1 id riêng tức các vật phẩm cùng loại sẽ có id giống nhau và mỗi địa chỉ sẽ chứa 1 lượng các NFT có id đó. Phải dùng đúng loại tùy TH vd 1 bức tranh thì chả ai chia bức tranh ra cả nên họ dùng ERC721.
VD: người ta bán cổ phiếu, mỗi tờ cổ phiếu có giá trị như nhau mà thì sẽ dùng ERC1155 để xem address nào sở hữu bao nhiêu cái NFT có id là gì

Opensea: là sàn giao dịch NFTs phi tập trung lớn nhất thế giới hiện giờ. Có thể mua bán bất cứ vật phẩm NFT nào. Có thể giao dịch các vật phẩm game NFT ở đây. Có thể thực hiện các phiên đấu giá luôn.
Để giao dịch: kết nối ví với opensea.
Ta có thể tạo ra 1 bộ sưu tập My Collections là nơi lưu các NFTs để bán or sưu tầm


Tạo NFT ERC721 cần 2 thứ: smart contract cho NFT, nơi lưu resource của NFT(cx chỉ là 1 nơi lưu file 1 cách public);
VD ta sẽ lưu resource trên github or storage.googleapis => k lưu ảnh trên github
Còn code ta sẽ đi từng bước từ code cho tới publish bán NFT luôn

C1: kế thừa contract ERC721 có sẵn vd tài sản là 1 bức ảnh đi
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol"; rồi tạo constructor là xong 1 contract NFT
=> Deploy contract này lên mạng thì ta sẽ có 1 NFT chứa thông tin metadata đến bức ảnh của ta. Ở đây chỉ có 1 bức ảnh với 1 id duy nhất tồn tại trong cả 1 contract. Mỗi NFT tạo bởi ERC721 đều chỉ gán với 1 tài sản duy nhất, còn vật phẩm mà mỗi địa chỉ có 1 lượng nhất định thì k đc dùng ERC721.
Chọn đúng 1 compiler, add cả comment license, deploy lên mạng rinkeby, kết nối vào metamask ký transaction. Như v là contract đã được deploy lên blockchain và mined vào 1 block. Tuy nhiên source code chưa công khai, k có ai tương tác với smart contract của ta được, ta cần vào etherscan bằng cách tra address contract để verify and publish contract bằng cách cung cấp source để khi compile ra đúng cái abi đã có. Điều này là cần thiết vì contract phải có source code công khai để người ta có thể xác nhận đúng là contract làm đúng những gì nó supposed to do.
Chọn compiler, license, contract address -> upload source và compile ra và so sánh với abi
=> chỉ có điều trong etherscan, lệnh import từ bên thứ 3 không hoạt động, trong solidity extension cũng k cho dùng hàm import. 
Cách dùng được: tạo dự án truffle với contract hiện tại -> npm install @openzeppelin/contracts -> thế là import "@openzeppelin/contracts/token/ERC721/ERC721.sol"; -> dùng tool truffle falttener or npx hardhat flatten để merge tất cả các file import thành 1 contract duy nhất, nhớ xóa chỉ để lại duy nhất 1 license-> copy vào remix và deploy như bth. 
=> khi ta gửi lên mạng phát là có thể tương tác để test với smart contract r dù chưa mined, do đó truffle test chỉ cần deploy phát là tương tác được luôn, k cần await <contract>.deloyed()
Trên etherscan cũng tương tự, địa chỉ của NFT nó hiện như 1 địa chỉ của token và nó được tạo ra bởi địa chỉ contract của ta. Phần read contract là chạy các hàm k đổi state, còn read contract là chạy có đổi thì phải connect to provider VD ví metamask
->deploy xong vào etherscan tại contract đó là có thể tương tác được với contract qua từng hàm 1 r. Có 2 hàm 1 là _mint là hàm lần đầu tiên, bất cứ ai cũng có thể vào mint cái thẻ của ta lần đầu tiên vào địa chỉ đó và địa chỉ đó sẽ có chủ. Chủ nhân của chiếc thẻ sẽ là duy nhất 1 người đó mà thôi. Sau đó muốn chuyển NFT cho người khác thì gọi hàm transfer form và chỉ chủ nhân của NFT mới được chuyển thôi
->Như v là xong vc tạo NFT cho 1 tài sản số là ảnh 1 tấm card có đầy đủ các hàm cơ bản của NFT. Ta nhận ra ERC721 có thể chứa nhiều token bằng việc lưu các token có link giống nhau chỉ khác 1 tí trong url là gọi là tokenId-> tức là ta có thể gán cho nhiều tokenId là các đường link khác nhau
Ta _mint để nó thuộc quyền sở hữu của ta. Chú ý nếu chưa mint thì k thể xem baseURI cả vì k thuộc về ai cả thì k ai sở hữu
=> Nếu ta k verify and publish thì khi deploy xong thì ta là deployer vẫn có thể tương tác với smart contract được, nhưng những người khác sẽ không thể tương tác với
contract của ta được bằng etherscan. Dù họ đoán được các hàm và dùng abi + address thì vẫn thao tác được bằng các library. Chứ ta vẫn dùng NFT bán bth mà k cần verify and publish.
=> Nếu opensea k hiện ảnh thì phải nghĩ đến TH là link ảnh nó k hoạt động => opensea k nhận ảnh của github, có lẽ chủ nhân của bức ảnh có thể xóa mất chăng
Để bán trên opensea: My Collection -> Import from smart contract-> điền địa chỉ vào-> refresh metadata là chờ 1 lát là hiện ảnh trong profile, để bán nó đi ấn vào bán thì sẽ phải xác thực giao dịch là setApprovalForAll bằng ví của ta.
Trong opensea cũng có cơ chế để non-developer có thể bán được như v bằng cách create new item xong điền thông tin vào là 1 nó tự động tạo ra transaction và mint NFT đó vào địa chỉ của ta. 
=> các transaction do opensea tự thực hiện mà kp do ta chủ động thực hiện trên remix hay etherscan thì opensea nó sẽ k cho xem transaction trong mục Event, ngược lại các transaction khác ta ấn vào Date của nó là sẽ tự mở etherscan transaction đó cho ta. Dù sao thì track địa chỉ người dùng thì cx ra hết thôi
Để tạo ra file json chứa metadata hiện ra được trong opensea các thuộc tính và hình thì phải tuân theo chuẩn nhất định:
{
    "name": "<tên>",
    "description": "<mô tả>",
    "image_url": "<image_url>",
    "external_url": "<url of website>", 
    "attributes": [
        {
          "trait_type": "<key>", 
          "value": "<value>"
        }, 
        {
            "display_type": "<type to display>", 
            "trait_type": "<key>", 
            "value": <value>
        }        
      ]
}
=>Lưu ý: Ta k thể xóa NFT trong opensea, đó là thứ làm chứng cho tính công khai và không thể thay thế của blockchain. Nhưng ta sửa đổi thông tin của image trong url json của github thành 1 bức ảnh khác kiểu ta bán nó đi xong ta mới sửa thì người mua sẽ bị lừa còn gì-> thực chất k ai người ta mua 1 bức ảnh mà file json và file ảnh lại ở 1 trang web cho phép 1 người khác chỉnh sửa được cả nên sẽ k ai mua ảnh của ta khi file json trên github. Ta phải upload lên 1 hệ thống k ai can thiệp đc như IPFS, 1 khi ảnh đã up lên thì k ai can thiệp vào đc nx.
=>Lưu ý 2: Khi làm ERC721, ta mint tokenId là 1-> ok nhưng mint tokenId là 3 vẫn ok dù tokenId là 3 thì link file metadata k tồn tại. Ta phải nhớ tokenId là gì mà mint thôi. Tức là ta deploy contract, mint hết các tokenId mà chỉ có ta biết là tokenId đó nó tồn tại, thế là sở hữu token và bán nó thôi chứ người dùng kp deployer sẽ k tương tác với token ERC721 nhé. Chỉ mint 1 lần duy nhất để nó tồn tại và dùng.

Phân tích giao dịch mua 1 NFT của ta: 
Hàm approve() cho chỉ có owner của 1 token Id thực hiện cho phép 1 address nào đó dùng chung tokenId đó với họ, chỉ được 1 address
Hàm setApprovalForAll() thì bất cứ ai cũng có thể thực hiện được là cho phép 1 người nào dùng được chung mọi tokenId với họ nếu họ có tokenId, nếu họ k có thì khi nào có sẽ được dùng chung
Khi dùng opensea, làm sao mà người bán nhận được tiền còn người mua nhận được ảnh trong khi smart contract của ta k có payable function. Đúng v, khi ta mua 2 NFT chả liên quan gì đến nhau thì khi kiểm tra etherscan, cả 2 transaction đều tương tác với cùng 1 contract=> cơ chế open sea, VD ta mua 1 NFT giá 0.01 ether: 
Nó lấy provider là ví của ta và gọi các hàm trong 1 contract riêng của opensea-> đầu tiên nó chuyển tiền vào contract riêng đó-> Sau đó nó contract riêng đó chuyển 2.5% ether cho chính 1 address ví riêng của opensea để nó kiếm lời và phần còn lại chuyển thẳng cho địa chỉ người bán. Sau đó gọi contract của ta chuyển NFT từ người bán cho người mua với tokenId là bao nhiêu. Để làm được điều đấy, opensea đã phải verify and publish các contract để tạo sự tin tưởng r.

Nếu như ta deploy contract lên opensea, xong xóa source code đi-> tada, kbh thao tác được nx vì éo nhớ hàm và etherscan chỉ còn mỗi abi
Do hàm import từ http vẫn nhận trên remix nên nếu k cần verify and publish cho người khác xem code và tương tác mà chỉ mình ta thôi thì k cần dùng flattener j hết

=>ERC721 cung cho ta 1 URI kèm tokenId để ta có thể có 100 NFT thì có 100 tokenId với cùng 1 URI đó, và mỗi NFT trong 100 cái đó là khác nhau. Hàm balanceOf của ERC721 trả ra số loại NFT khác nhau mà 1 địa chỉ đang sở hữu, 100 NFT có 100 id khác nhau, mỗi id số lượng đều chỉ có 1 và k thể chia nhỏ.
=>ERC1155 có hàm balanceOf trả ra số lượng loại tokenId nào mà 1 address nào đang sở hữu và nó tồn tại được bằng cách ERC1155 mint từng phần một cho mỗi loại id. Lợi ích là sẽ save gas vì ERC721 sẽ phải deploy từng loại token thành 1 new contract tốn gas, nhưng theo ta nếu ta dùng 1 baseURI và tokenId trải dài chứa tất cả các NFT cx ok nhưng tư duy đó thì chia file nó rất vớ vẩn, thay vì v dùng 1 chuẩn mới 1155 sẽ tốt hơn. Nó cũng cung cấp các hàm thao tác với 1 lượng NFTs 1 lúc chứ kp muốn chuyển từ ông này sang ông kia phải chuyển từng cái 1 giúp save gas, gọi là batch operation vd: _mintBatch hay balanceOfBatch

C2: ERC1155 import có sẵn
=>ERC1155 hỗ trợ cả fungible-token và non-fungible token, các token nào số lượng là 1 thì là NFT còn có > 1 thì là FT
Giả sử ta dùng để tạo vật phẩm game, khi deploy contractERC1155 thì deployer sẽ sở hữu tất cả và transfer cho các player và player có thể trade vật phẩm với mọi người, để thực hiện 1 chức năng trong game chẳng hạn. Đó là mặc định vì ta có thể toàn quyền thêm hàm mint vào contract để mint phụ thuộc vào demand của player
ERC1155 k có trường decimals thập phân vì 1 item của 1 tokenId thì k chia nhỏ
balanceOf(<address>, <tokenId>) trả ra số lượng tokenId address sở hữu
safeTransferFrom(<người sở hữu>, <người gửi đến>, <tokenId>, <amount>, <data k dùng thì để là "0x00">) 
safeBatchTransferFrom(<người sở hữu>, <destination>, [<mảng các tokenId>], [<mảng số lượng>], <data>) => gửi 1 cục luôn
balanceOfBatch([<mảng các address>],[<mảng tokenId đúng thứ tự với các address>]) => trả ra mảng các balance của address có tokenId đúng thứ tư
uri(<tokenId>) => trả ra link to metadata file của tokenId đó
file metadata.json: 
{
    "name": "<name>",
    "description": "<description>",
    "image": "<link ảnh>",
    "<key>": <value>
}
=> hàm safeTransferFrom có vai trò gửi an toàn. Trong quá khứ có rất nhiều vụ gửi token ERC1155 vào địa chỉ contract mà contract đó k hỗ trợ ERC1155 protocol thành ra nó k hiểu được nó nhận được cái gì. Hậu quả là đã token bị locked forever ở đó. Hàm có chữ safe sẽ báo lỗi và revert nếu gặp địa chỉ contract k hỗ trợ ERC1155. 
Để 1 contract bth nhận được ERC1155 thì phải: 
import "@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol";
contract MyContract is ERC1155Holder { }
deploy vào network-> bán trên opensea tương tự y như bán ERC721, đm nó lúc này link github lại đc
Có thể chuyển NFT từ tài khoản này sang tài khoản khác chung 1 ví

Để 1 smart contract nhận ETH, nó cần hàm receive() payable vì nó là native coin
Còn ERC20 token thì mọi ví hay contract đều có thể nhận token mà k cần implement gì thêm, tương tự mọi fungible token chuẩn ERC20
Nhưng NFT 721 và 1155 thì k như v, nếu NFT được implement chuẩn openzeppelin thì mọi địa chỉ ví đều có thể nhận NFT nhưng nếu là contract thì:
=> Nếu người gửi sử dụng transferFrom để gửi NFT thì contract có thể thoải mái nhận mà k cần implement gì thêm dù k an toàn và có thể bị lock
=> Nếu người gửi dùng safeTransferFrom thì contract phải implement thêm mới có thể nhận NFT nếu k sẽ revert
