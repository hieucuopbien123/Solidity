Trong Vipre có 1 hàm là creat_forwarder_to dùng cơ chế minimal proxy contract. Ta sẽ mô phỏng lại:

Nếu ta có 1 contract mà muôn deploy multiple time thì nên dùng minimal proxy contract để deploy nó cho rẻ. Đây là cách rẻ nhất để deploy 1 contract nhiều lần(para có thể khác nhau).
Minimal contract là proxy contract chỉ có duy nhất delegate call, k có thêm bất cứ hàm nào khác. 

Cơ chế: ta muốn clone 1 contract 100 lần
ta deploy contract A đầy đủ code lên-> tạo ra contract factory có hàm tương tự create_forwarder_to -> gọi hàm đó truyền vào địa chỉ contract A -> hàm đó sẽ tạo ra 1 contract copy của contract A -> gọi nhiều lần thì có nhiều contract A. Ngay sau create_forwarder_to ta có gọi thêm hàm setup để set thêm các tham số cho contract mới
khi ta gọi hàm trong contract copy, nó thực chất gọi hàm trong contract A nhưng update var trong B
=> Cơ chế là dùng delegate call

tính chất: rẻ vì bên trong contract copy của A rất ít code vì toàn gọi delegate call; gọi hàm bên trong contract copy k ảnh hưởng đến contract A gốc vì delegate call chỉ gọi hàm còn state var riêng ở từng contract copy; constructor của contract A k được gọi;

Nó khác với cách dùng bth mỗi lần gọi hàm ta truyền vào địa chỉ để gọi hàm ở địa chỉ đó. Ở đây ta truyền vào duy nhất 1 lần lúc deploy và nó có địa chỉ đó luôn và gọi được mọi hàm ở contract gốc luôn

msg.data là abi encoded chỉ ra cho contract function nào với param nào được call. Nó thường tóm gọn trong 4 bytes và ta gọi 2 function khác nhau thì msg.data là khác nhau => Nếu ta gọi same function với same param thì msg.data có thể bị trùng
Khi gọi 1 hàm thì msg.data dùng trong hàm chính là bytes4(keccak("<signature hàm đó>"))
Nhiều lúc họ dùng sha3(msg.data, block.number) để làm identifier nhưng chỉ với mỗi block

Nó gọi là proxy vì nó gọi thông qua 1 contract trung gian, gọi là minimal vì code cực ít, mỗi hàm nếu thích chỉ cần 2 dòng








