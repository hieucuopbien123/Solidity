Token: 
Cách 1: import từ ERC20.sol có sẵn của ethereum
Truffle: là tool dùng như 1 môi trường phát triển, testing framework và asset pipeline của lập trình ethereum giúp tạo test environment, viết test cho contract và nhiều thứ. 
Ganache là 1 blockchain cá nhân for rapid Ethereum và phát triển ứng dụng phân tán. Có thể dùng nó để develop, deploy, test dApps trong môi trường an toàn. Có 2 loại là UI và CLI.
Ganache-cli(Ganache commandline): sẽ kết hợp cùng truffle để tạo test environment đủ tính năng.
=> Trong remix cx cho ta deploy contract trên môi trường test thì truffle chỉ là 1 cách khác mà thôi. Còn ô ganache tạo hẳn 1 persional blockchain riêng.
=> npm install -g truffle  và  npm install -g ganache-cli-> kiểm tra truffle với: truffle version
-> truffle init khởi tạo project-> ganache-cli -p <port> trên 1 terminal riêng để khởi tạo personal blockchain để test với mặc định 10 account 100 ether kèm pivkey, 1 ví HD wallet với mnemonic và gas price, gas limit, blockchain này mở trên 1 cổng đc chỉ định. port mặc định là 8545-> cài đặt kết nối với mạng trong truffle-config.js qua cùng cổng mà ganache mở chạy-> tạo smart contract: truffle create contract <tên contract> -> code smart contract-> truffle compile để compile code-> sinh các file thư mục build chứa thông tin cac contract dạng json-> cấu hình để deploy: truffle create migration <tên file> -> thư mục migrattion-> code deploy-> truffle migrate để deploy vào mạng blockchain tạo bởi ganache qua cổng được xđ ở file truffle-config.js sẽ hiện các thông số của deploy như tên network, trans hash, contract address,.. -> Deploy xong thì test: truffle create test <tên contract> -> sinh ra file thư mục test-> viết code test bằng 1 module của js là mocha(Truffle sử dụng thư viện Mocha và Chai của javascipt để test smart contract, nó có sẵn trong truffle r)-> npm install truffle-assertions để thêm module hỗ trợ test fail-> truffle test để chạy test.
=>Đó là từ đầu đến cuối, sau khi có r thì chỉ cần truffle compile và truffle migrate mà thôi => sau khi migrate thì cx là thực hiện 1 contract nên terminal của ganache sẽ hiện ra thông số của block mới
-g trong npm là global, có thể sử dụng nó như 1 command độc lập

Khi chạy truffle compile nó sinh ra file json chứa abi nhưng trường network bị trống-> NN là vì nó chưa deploy vào network nào hết. Khi ta chạy lệnh migrate nó sẽ tự compile lại và deploy vào mạng ta set trong file config, khi đó trường network sẽ có network id của mạng mà ta đã deploy vào

Truffle:
truffle cx có thể xây 1 blockchain riêng k cần ganache với truffle develop mặc định cổng 9545, dùng nó thay thế ganache-cli => nó mặc định có 10 account và hiện thị cả 10 private key và 1 mnemonic
cmd: truffle => hiển thị các câu lệnh của truffle
Trong truffle thì ta có thể đổi version compiler bằng cách chỉnh TT trong truffle.js

Mở 1 terminal khác và: có 10 tk, truffle migrate sẽ tự dùng tk đầu tiên(đã tạo file migrate r) or:
dùng chính terminal truffle develop-> migrate sẽ tự động deploy vào mạng truffle develop đó
=> nó hiện ra 10tk-> ta có thể import tk đó vào metamask để sử dụng như 1 account trong mạng blockchain truffle develop: truffle develop-> lấy url mạng-> metamask-> custom RPC-> paste url mạng, tên mạng ta đặt tùy ý, chainId của truffle develop là 1337-> import account trong metamask bằng private key nó cung sẽ có 100ETH
Tương tác với truffle develop: await web3.eth.getChainId(); await web3.eth.getId(); để lấy network id và chain id của blockchain truffle develop
Trong truffle ta có thể viết test bằng solidity or thư viện Chai và Mocha
npm install --save-dev chai chai-as-promised => chai-as-promised bổ trợ cho Chai ta sẽ dùng khi test tự án

Phân tích: 
=> Có bài phân tích rõ hơn ở Project setup
-Trong javascript front end html reacct, nó chỉ có import và export và dynamic import nhưng nó phải thỏa mãn điều kiện là 1 module hay gì nx(đã biết) thì mới đc sử dụng. Ta dùng file js đó trong file html khác để thao tác ở front end mà thôi. Để sử dụng file js đó, ta phải chạy thông qua file html lên browser bằng  cách import nó vào file html dưới dạng module.
-Khi sang React nó chỉ khác 1 điều là export import trực tiếp luôn giữa các file js mà k cần module con mẹ gì trong cùng 1 dự án
=> Đó là trong front end, bh ta sang backend
-Trong nodejs, nó có import, require, module.export, export. Để dùng được các hàm này thì trước hết file js của ta phải dùng để code backend trước đã. Khi dùng để code backend tức là chỉ cần k thao tác hiển thị ở browser là đã ok r. Để chạy file js của nodejs ta dùng node <tên file>.js ở terminal. Trong file đó ta dùng đc các hàm như trên đều là của nodejs.
=> Vc ta dùng npm install hay npm init cũng chỉ là tạo thêm module để require or import vào trong dự án mà dùng thôi, nếu k có mà dùng file.js và chạy trên terminal như v vẫn được coi là chạy file js.
=> Chính vì v, node js nó coi là 1 trình thông dịch js chạy trên server nhưng nó lại ứng dụng rất nhiều trong các thứ khác chứ k chỉ là code mỗi server nhờ các module mà nó hỗ trợ.
VD: tạo 1 dự án react thực ra cx là code nodejs trong đó nhưng nó chỉ hoàn toàn là front-end. Các module mà nó cung cấp có thể dùng chạy bất cứ thứ gì như truffle cx v. 
Nodejs dùng code javascript. Thực ra code javascript đâu có các hàm require đâu. Code js thuần chỉ là code bth còn nói Nodejs dùng code js chỉ là 1 phần, nó còn mở rộng code đó nhưng vẫn dùng cú pháp của js nên mới gọi là code js. Như qt dùng code C++ nhưng thật ra C++ làm gì có QString, nó chỉ mở rộng từ code C++ thêm với cú pháp cơ chế giống mà thôi. 
Trong node js, hàm import và export là của nó chính là code js thuần. export ta k nói làm gì nhưng import thì trong nodejs lại có 1 hàm riêng là require dùng tương tự import. Thực chất, khi nodejs compile thì import cx được chuyển về require để thực thi. require là chuẩn commonjs còn import là tính năng mới của ES6. Ng ta vẫn dùng import vì nó cho phép chỉ import những phần mình cần con require thì vơ cả nắm. import là bất đồng bộ còn require có cái trước mới có cái sau. 
K thể viết code jsx vào file js. Trong react nó viết đc do đã được sắp xếp hết r. Khi compile nó sẽ chuyển qua babel để xử lý.

Ganache-gui: tải từ https://www.trufflesuite.com/ganache-> mở chạy trên 1 cổng

Truffle có nhiều kiểu khởi tạo, truffle init là dự án trống. Còn truffle unbox <tên dự án> là dự án có thêm vài thứ. Khi dùng như v, nó tự tạo font-end trong thư mục src. Mặc định là cửa hàng shop thú cưng
Cấu trúc: contracts(code solidity có sẵn Migration.sol), migrations(chứa các file js để migrate đi), test(chứa các bản kiểm thử), truffle-config.js(file cấu hình)

trong truffle có thư viện lite-server dùng để làm web server cục bộ sử dụng DApp. Nó đi kèm với Truffle Box nên dùng truffle như trên là có r. Cụ thể trong file bs-config.json đã tự set base directory là src chứa các file font-end và build/contracts chứa các smart contract. Và bên trong file package.json tự có "dev": "lite-server" tức khởi chạy lite-server r
Để chạy ta dùng: npm run dev là xong

Khi chạy truffle test: nó chạy vào file main của dự án nodejs tức chạy vào truffle-config.js(lúc nào cũng v, nodejs là 1 dự án đơn luồng mặc định + event loop), tức là mỗi khi chạy dự án, thực chất là ta gọi 1 lệnh script chạy 1 file. Vc chạy file đó sẽ kéo theo chạy hàng loạt các thứ khác về sau-> cứ theo cái luồng đó mà phân tích. Tuy nhiên ở đây kp lệnh npm mà là truffle test nên bên trong nó configure như nào khó nói nhưng dù gì cx chỉ là chạy các file theo 1 luồng
->compile các contracts ở thư mục contracts-> chạy migration.js, ở đây sau khi compile contracts sẽ sinh ra 1 biến global artifacts, biến này có 1 thuộc tính duy nhất là require("<tên file.sol>") để lấy thông tin của contract trong file sol đó -> sau đó chạy module exports với function 1 tham số deployer để deploy nó đi lần lượt file migration r tới file contract của ta->
Ta hiểu khi cái truffle nó sẽ sinh ra file như kiểu:
if(command cmd == truffle test)
  import var1 from truffle-config.js
  var artifacts = <tool compile của truffle>.compile(các contract ở thư mục contracts)
  if(compile thành công)
    bool check = true;
    for(các file trong thư mục migrations : file)
    {
      import var2 from file;
      var2(<tool deploy của truffle>, var1) =>vì var1 chứa thông tin về mạng
      if(deploy thất bại)
        check = false
    }
    if(check == true)
      chạy command: node <mọi file thư mục test>
=> Điều này đã giải thích vì sao sinh ra biến artifacts là biến global dùng ở mọi file -> thực chất nó k là biến global có sẵn của truffle mà nó được dùng theo kiểu bên trên sinh ra khi contract được compile thì thông tin contract lưu vào biến đó. Còn biến developer của file <contract>.js cx đc sinh ra kiểu như v là 1 tool deploy của truffle. Đó cx là lý do vì sao ta k tìm đc thư viện nào có artifacts hay deploy kiểu v là vì nó chỉ có sẵn trong truffle r. Lúc này ta nên follow code cố định như v, dùng các biến mà không thắc mắc. Nếu là của thư viện nào đó thì ms đáng quan tam


Để tạo độc lập 1 DApp chạy trên 1 mạng thử nghiệm tất cả mọi thứ, ta cần: 
viết smart contract, compile smart contract, tạo và chạy 1 blockchain, deploy contract lên blockchain đó, test các tính năng của smart contract trên blockchain đó, front end kết nối với blockchain đó, server để khởi chạy front end đó, ví điện tử có tài khoản trong mạng blockchain đó -> truy cập vào trang web đó liên kết với wallet và thao tác bth. 
Qua đó ta thấy được là smart contract kết nối với ứng dụng web chỉ là để làm 1 vài chức năng liên quan đến giao dịch, chứ các thao tác bth có thể k cần liên kết với ví, điều này cx giống như các game NFT, ta chơi game như bth, chỉ là ta dùng token để thao tác giao dịch gì đó trong game, vật phẩm tồn tại được đẩy lên blockchain nên là duy nhất nên mới có giá trị. Chứ game mà sập thì dù vật phẩm còn nhưng cx chả còn ý nghĩa gì.

Mô hình chạy ở project shop thú cưng: giả lập 1 mạng blockchain với ganache-> code smart contract bằng solidity và deploy nó lên mạng blockchain kia bằng truffle. Tạo 1 giao diện front end, dùng web3js(cdn) để tương tác với mạng blockchain giả lập kia lấy dự liệu về cái smart contract thú cưng vừa deploy. Tạo 1 server giả lập nhanh(vì ta k dùng hosting mà máy ta thành server luôn)
Duy trì mạng blockchain, chạy server-> vào trang web là xong. Để thao tác với các transaction bằng web3 cũng phải cấu hình ví metamask vào cái mạng kia.
=> thế là ta đã tạo được từ A-Z mạng, smart contract, ứng dụng tương tác với smart contract  

Tổng kết các tool và framework đã biết liên quan tới blockchain smart contract: 
Tool viết smart contract: solidity extension, truffle, remix, Hardhat
Tool compile smart contract: solidity extension, truffle, remix, remix extension, Hardhat
Tool tạo mạng personal blockchain: Ganache-CLI, Ganache-GUI, Truffle Develop, Geth(local mode), Hardhat
Tool deploy smart contract vào mạng chỉ định: Truffle Migrate, remix, Hardhat
Tool deploy smart contract có sẵn mạng blockchain của nó: remix, Hardhat
Tool test smart contract: remix, Truffle(thư viện Mocha và Chai), Hardhat
Ví để dùng và test: MetaMask
Mạng public để test blockchain: Ropstent, Rinkeby
GUI cho smart contract: html, javascript, react, (bootstrap, react-redux, redux-saga, react-transition, react-router-dom, react-bootstrap)
Thư viện giúp tương tác GUI với smart contract của 1 blockchain nào đó: web3js
Tool tạo personal server cho GUI: Truffle Box(có lite-server), 000webhost
Backend kết nối với database server: NodeJs, (express, json-server)
Database: Microsoft SQL server
Ngôn ngữ lập trình blockchain core: Haskell, Golang, C++

HardHat: mạnh hơn Truffle và dùng cho các dự án phức tạp, nhanh hơn, nhiều tính năng hơn. Nó là môi trường compile, test, debug luôn(hỗ trợ console.log biến). Nó hỗ trợ typescript, có plugin thêm chức năng, tích hợp mạng local Ethereum network designed for development
=> cài đặt: npm init --yes => là cài với mọi thứ mặc định yes hết
npm install --save-dev hardhat => cài hardhat trong node modules
npx hardhat => để chạy => chọn các options mong muôn

Khi run, hardhat sẽ tìm file hardhat.config.js gân nhất để chạy
Cài đặt plugins built-in của hardhat:
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
=> cài đặt 2 plugins Ethers.js và Waffle giúp interact với Ethereum và test contract. 2 plugin này là tối thiểu cần thiết để compile và làm mọi thứ
=> thêm require vào hardhat.config.js => tạo thư mục contracts và code file solidity
npx hardhat compile  => để compile
=> tạo thư mục test và code file js để test
npx hardhat test  => để test các file trong thư mục test. Nó sẽ tự động compile lại nếu nó bị thay đổi kể từ lần test trước
default hard hat đã connect với local network r
=> code file js deploy contract trong thư mục scripts
npx hardhat run scripts/deploy.js --network <network-name> => để deploy, nếu k có --network thì mặc định deploy sang local
+) 3 công đoạn deploy, compile, test là rời nhau được chứ k cần phải compile trước r mới test sau vì nó ngầm nếu có thay đổi sẽ tự compile r.
Để deploy vào remote networks: chỉnh file hardhat.config.js theo mạng nào muốn deploy vào-> chạy hàm deploy có option --network
VD mạng ropsten: npx hardhat run scripts/deploy.js --network ropsten
=>ta có thể dùng Alchemy là nền tảng cung cấp API key cho blockchain network để connect vào dự án. Và xuất khóa riêng tư để dùng cho app(nó tốt hơn infura)

Ta phải npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle trước r require nó từ file hardhat-config.js r mới dùng biến ethers ở file script/deploy.js để deploy nó lên mạng được. Nếu k làm v thì k deploy nó lên mạng được. 
=>file nó sắp xếp ảo vcl, ta chuyển require sang hẳn deploy.js thì lại k đc
Ở truffle khi test nó dùng hàm <contract>.deployed() để deploy contract sau đó chạy các hàm để test, còn thực tế file deploy.js nó chỉ dùng deployer.deploy(<contract>)
Ở hardhat, nó tái sử dụng ethers.js ở cả file test và file deploy để deploy contract vào mạng thực tế và deploy để test hàm.

Cấu trúc file thứ mục Sample Project của Hardhat tương tự như Truffle: 
Thư mục contracts chứa mã nguồn của các smart contract
Thư mục scripts và migrations chứa các script viết bằng Javascript để biên dịch, deploy smart contract. Trong truffle k cần đệm file Migration.sol nên tiết kiệm 1 lượng gas
Thư mục test chứa unit test viết cho contract
2 File hardhat.config.js và truffle-config.js chứa các config như networks, địa chỉ ví, trình biên dịch, thư mục build.
Trong trong hardhat thì file config còn chứa các task ta có thể chủ động tạo ra.

npx hardhat node => lệnh run hardhat network riêng để các client có thể connect vào nó -> sau đó ta có thể deploy contract vào mạng đó với --network localhost
Bth ta chạy npx hardhat run nó cũng deploy vào mạng đó nhưng mạng đó chạy ngầm, ta có thể chạy riêng để nhiều client connect vào đc
Để connect ví metamask vào mạng blockchain này: run cái node kia-> RPC tùy chỉnh-> thêm network này vào là xong, mã chuỗi là 31337

Chạy Hardhat với front-end kết nối vào ví của ta và chuyển token vào ví: 
Cấu trúc file y hệt: git clone https://github.com/nomiclabs/hardhat-hackathon-boilerplate.git
=> nó chạy dự án react với hardhat
cd hardhat-hackathon-boilerplate
npm install => để cài đặt dự án hiện tại 
npx hardhat node => để chạy mạng blockchain
Mở terminal khác deploy contract lên mạng: npx hardhat --network localhost run scripts/deploy.js => nhớ có option localhost nhé, k có là ăn lỗi
=>thật ra chả cần --network localhost nếu ta đã config trong file hardhat-config.js r nhưng ta chưa làm v nên k cần
chạy front end:cd hardhat-hackathon-boilerplate/frontend/
npm install
npm run start
mở tại: http://localhost:3000/
RPC kết nối ví vào mạng
lấy Token từ faucet: npx hardhat --network localhost faucet <my address>
=> xong. Ta có thể dùng cấu trúc tương tự để dùng trong dự án riêng của ta. Nên dùng thay thế hoàn toàn truffle

Phân tích code:
dự án truffle và hardhat nó éo liên quan gì đến nhau. Ta k được nhầm lẫn bất cứ dòng code nào kể cả có 1 số đoạn trùng ở file test, cứ coi nó là khác nhau đi
hardhat-waffle chứa hardhat-ethers nên chỉ cần require("@nomiclabs/hardhat-waffle"); là có cả 2

Ta có thể thêm task vào dự án hardhat. các task thường cung 1 chức năng tự động cho hardhat, vd ở dự án với front end ta tạo ra 1 faucet thì nó là 1 task
Ta có thể thêm nhiều plugin khác cho dự án, vd: hardhat-ethers -> các plugin đó giúp cho dự án tương tác với smart contract dễ hơn như ethers giúp deploy, còn rất nhiều plugin khác có thể thêm

Để tạo 1 task: 
task("tên", "mô tả") => trong hardhat có các task built-in sẵn có thể xem bằng cách npx hardhat => sẽ hiện ra các available task bao gốm cả task ta tự thêm. Ta có thể tạo ra các task như reset lại state of môi trường, tương tác với contract. Task là async. Do nó đc require trong file config đã require các plugin từ trước nên nó dùng được mọi plugin injected ví dụ như ethers. Bởi vì configuration file luôn chạy trước bất kể thứ gì.
VD: npm install --save-dev @nomiclabs/hardhat-web3 web3  vào trong file config để dùng web3js instance-> ta có thể dùng nó trong file task.

Khi ta chạy truffle test: nó chạy vào file config rồi deploy lên mạng sau đó chạy file test chạy từng hàm để test giá trị trả về từng hàm. Nó deploy lên mạng nó đang kết nối luôn
Khi ta chạy npx hardhat test: nó chạy vào file config r chạy sang file test luôn mà bỏ qua công đoạn deploy. Do đó khi viết code truffle test ta k cần phải gọi hàm deploy gì nx vì nó deploy sẵn r, ta chỉ await <contract>.deployed() để check đã deployed thành công mới đi tiếp mà thôi. Còn trong hardhat viết test ta phải gọi hàm deploy r mới test đc. Hardhat mặc định chạy test sẽ deploy vào hardhat network ngầm, code của nó kiểu
if(cmd1 == npx hardhat)
  import file config;
if(cmd2 == test)
  chạy file config có hardhat net k
  if(có) chạy
  if(k có)
  {
    bật hardhat network
    chạy file test.js
  }
Khi deploy với npx hardhat run scripts/deploy.js --network <network-name>:
cơ chế vẫn ez: đầu tiên chạy file config và sinh biến global hre. Biến hre là biến global nên có thể truy xuất trực tiếp vào chúng cx đc như ethers. Khi sử dụng hardhat, ta buộc phải dùng thư viện ethersjs, nhưng hardhat có bổ sung thêm cho thư viện đó. Khi ta install @nomiclabs/hardhat-ethers thì nó có tác dụng sửa lại thư viện ethersjs đi 1 chút thành các hàm có tên khác ví dụ getContractFactory thì ethersjs k có nhưng @nomiclabs/hardhat-ethers fix thành có và đồng thời biến ethersjs thành 1 thuộc tính của biến global hre. Do đó @nomiclabs/hardhat-ethers gọi là plugin chứ kp 1 thư viện và nó k cung cấp thêm hàm mới. 
Ở trong file package.json, plugin có thể chia ở trường devDependencies còn library chia ở trường dependencies. Nếu k dùng plugin thì sẽ phải export require rất phức tạp vì biến ethers khi require là copy, và muốn dùng ở các file khác sẽ chỉ được require 1 lần và export đi khắp nơi nên plugin hardhat biến nó thành global cho ta
Tương tự với @nomiclabs/hardhat-waffle biến thư viện ethereum-waffle thành biến global là waffle. Nhưng do dùng @nomiclabs/hardhat-waffle thì chắc chắn sẽ dùng ethersjs nên bên trong @nomiclabs/hardhat-waffle nó import luôn @nomiclabs/hardhat-ethers thành ra trong file config nó thêm đúng 1 dòng:
require("@nomiclabs/hardhat-waffle"); là dùng đc ethers ở mọi file luôn như task, test, script vì nó nằm ở global hre rồi => hre.ethers === ethers. Các trường của hre thg dùng là network.name, ethers, waffle
Thêm vào đó là ta có thể dùng đc mọi module của nodejs trong dự án

web3 với ether ta có thể dùng cả cho front end hay back end thoải mái nếu ta cần, cũng chỉ là lấy dữ liệu về, thực hiện chỉnh sửa gì.

Các cách tương tác với blockchain bằng ethersjs và web3js đã biết cho đến h. Ethersjs mới hơn được dùng để thay thế web3 đã cũ. Dù dùng cách nào cx phải có tối thiếu 1 API url project tương tác với network, abi của contract muốn tương tác, address của contract muốn tương tác.
API url tương tác với network: API infura, API Alchemy  or tương đương với Provider  http://localhost:<port>, window.ethereum
abi của contract: vào etherscan lấy abi contract, khi deploy bình thường sẽ được dữ liệu là file json trong đó sẽ có trường abi
address của contract: deploy thì có, trong file json khi build ra cũng có
1) Khởi tạo biến web3: const web3 = new Web3(<url>);
Tương tác với contract nào: const contract = new web3.eth.Contract(<abi>, <address>);
2) Khi có trình duyệt thì tự động mở metamask kết nối:
Khởi tạo: const web3Provider = window.ethereum; window.ethereum.enable();
const web3 = new Web3(web3provider);
Tương tác với contract nào: dùng như cách 1
Nếu dùng truffle thì khi build ra: const <contract> = TruffleContract(<dữ liệu từ file json build ra>); contract.setProvider(web3Provider); => ta kp tách ra abi xong r lấy address nx mà truffle-contract lib làm sẵn
3)ethers dùng tương tác được y hệt như web3 cần 3 dữ liệu đó. Trong hardhat nó biến thành biến global cho ta tương tác với contract bất cứ lúc nào
4)ethers(dùng ở client thì k dùng biến global nx);
Khởi tạo: provider = new ethers.providers.Web3Provider(window.ethereum);
Khởi tạo contract nào: contract = new ethers.Contract(<contract address>, <abi>, <signer or provider>) => nếu cung provider thì chỉ đọc được, cung signer thì sẽ chỉnh sửa state đc luôn vì gọi được transaction. VD dùng window.ethereum để tạo provider thì provider đó chính là metamask của ta-> ta dùng getSigner để lấy tài khoản thứ bao nhiêu trong ví và truyền vào làm đối số 3

Xét dự án front end của Hardhat
Lần trước dùng truffle ta cần 1 cái server, 1 cái client, kết nối với smart contract thông qua thư viện truffle contract tương tác với file json là file kết quả nó build ra. Sau đó dùng web3js để tương tác với blockchain.
Dự án của hardhat nó chả cần tự tạo server nào cả nó chỉ cần deploy smart contract lên 1 blockchain, data của contract lưu vào 1 file Token.js ở cùng cấp thư mục client(khi deploy thì dùng fs để ghi) để lấy abi và address mà tương tác. Xong dùng ethers để tương tác với blockchain. Ở phía client thì dùng ethersjs biến mới, k cần dùng factory vì ta chỉ thao tác với các trans có sẵn chứ k deploy trans mới
Để chạy dự án hardhat front end: bật 1 mạng-> run file hardhat trên mạng đó-> npm start cái front end react => đơn giản
Để faucet vẫn phải run trên terminal, ta chưa xử lý vc đó
Tổng kết: ta có thể tùy biến, dù làm trên bất cứ 1 tool nào hay mạng hay bất cứ lib nào thì cũng chỉ cần từng này thứ tối thiểu đế chạy 1 DApp
1 tool viết smart contract, compile nó, deploy nó vào 1 mạng bất kỳ
1 tool tạo mạng 
1 front end app
1 thư viện tương tác từ app với mạng và smart contract

=> viết smart contract-> compile nó(cần: file .sol)-> tạo 1 mạng bất kỳ(kết quả: có ít nhất 1 tk trên mạng, chainID, coin) -> deploy nó vào 1 mạng(cần: port mạng đó, host mạng đó, file.sol đã compile thành công, kết quả: lấy được abi contract, address contract, address người deploy) -> tạo front end app-> 1 thư viện tương tác app với mạng và smart contract(cần: abi contract, api url mạng, address contract)

Trong Hardhat cũng có artifacts nó là 1 phần của hre. artifact có hàm readArtifactSync("<tên contract>"); sẽ trả ra object, object này có luôn abi của contract-> tức là ta có thể lây abi trong bản thân dự án luôn

proxy-> xử lý logic và lưu trữ khac nhau-> lưu trữ lưu ở proxy-> chỉ logic dùng trong smart contract-> proxy có nh kiểu proxy-> bth hay có admin(ai là ng đc update)
thay đổi logic biến, thêm biến, thêm hàm
nh loại proxy có initialize, proxy có admin??
