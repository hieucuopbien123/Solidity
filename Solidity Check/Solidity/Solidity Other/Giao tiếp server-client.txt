Phân biệt các tool:
Một trang web k giao tiếp giữa server và client thì rất dễ, chỉ cần send request qua lại qua các nút bấm là được. Nhưng 1 trang web cần giao tiếp thời gian thực giữa client và server thì phải sử dụng các kỹ thuật: AJAX, long-polling, short-polling, HTML5 server-sent request,.. => chậm, tốn tài nguyên

Tức là bth client và server của web giao tiếp được với nhau thông qua http request là đã biết r. Bh ta chỉ cần thêm 1 tính năng là 2 ông đó giao tiếp liên tục trong thời gian thực thì dùng thêm các tool và kỹ thuật khác thôi. Trong thực tế đa phần các app đều dùng socket, vd có sự thay đổi nào ở server gửi thông báo về máy điện thoại của client như cách ta nhận được thông báo hàng ngày trên điện thoại đó. Nếu k dùng giao tiếp realtime thì server gửi, client k thể bắt đc.
Giao tiếp giữa client và server trong 1 ứng dụng web chỉ là 1 ví dụ: trong thực tế bất cứ 1 client và server nào ko nhất thiết là của ứng dụng web đều kỹ thuật cho bọn chúng giao tiếp thời gian thực đc.
VD: client và server của ứng dụng chat qt đó, nó k hề là ứng dụng web gì cả. Chỉ là trên cùng 1 máy ta cho server chạy 1 port, client chạy 1 port. 2 cái này kết nối với nhau qua mạng bằng giao thức UDP or TCP là đã có giao tiếp thời gian thực.

Có rất nhiều giao thức và mỗi giao thức có rất nhiều tool và trường hợp để sử dụng tạo giao tiếp client-server. Ở đây ta chỉ xét 2 giao thức phổ biến nhất mà dùng cho rất nhiều ứng dụng từ web tới ứng dụng như game, android bth. Đó là TCP và UDP. Dù nó có nhiều tool cho phép implement 2 giao thức này nhưng chung quy lại cơ chế là như nhau(đã biết 2 giao thức này).
Có nhiều cách implement 2 giao thức này tùy ứng dụng khác nhau. Trong qt có các class như QTcpSocket, QUdpSocket để biến client và server thành 2 cái socket có thể kết nối TCP or UDP với nhau(socket là end-point tức cũng chỉ là 1 node trong mạng mà thôi, mỗi node là 1 socket).
Tức là nếu k cần giao tiếp thời gian thực thì k cần dùng giao thức TCP và UDP. Còn website bth dùng giao thức HTTP. Đây chỉ là các giao thức cực kỳ phổ biến giúp giao tiếp server-client với nhau. Trên thế giới có đến hàng trăm kiểu giao thức với vô số trường hợp giao tiếp khác nhau chứ k chỉ realtime với cả tĩnh đâu. Ví dụ SMTP giao thức truyền mail cũng chỉ là client và server gửi mail cho nhau, nhưng người ta k dùng các giao thức phổ biến HTTP, TCP, FTP để làm điều đó mà lại dùng SMTP bởi vì nó có những lợi ích riêng tùy TH nên mới dùng như v.

Có 2 loại là giao thức cấp độ thấp: UDP, TCP,.. tự chọn port
và giao thức cấp độ cao: HTTP(port 80), FTP(port 21),..
Các giao thức cấp độ cao thg thì có sẵn mọi thứ còn giao thức cấp độ thấp ta có thể chỉnh sửa theo ý muốn.

Tức là bh để dùng giao tiếp thời gian thực, ta dùng UDP và TCP. Để dùng UDP và TCP, ta phải dùng socket ở client và server. Có nhiều loại socket nhưng ta chỉ xét ở đây websocket là phổ biến nhất để giao tiếp ứng dụng web. Trong thực tế, websocket có thể dùng ở bất kỳ loại ứng dụng nào tùy lập trình viên.

WebSocket giao tiếp client-server bằng TCP. Giao thức thông thường là ws:// và giao thức secure là wss:// VD ta dùng nó trong web3 để giao tiếp vói Ethereum blockchain

Socketio tool này xuất hiện trong nodejs với cơ chế khá giống websocket nhưng tốc độ nhanh hơn, ta có thể dùng nó cho web or mobile. VD ta đã dùng nó để giao tiếp client và server của 1 website

Tương tự để giao tiếp web3 với Ethereum network liên tục trong realtime như subscrive an event thì phải dùng các tool có giao thức real time như TCP. Trong web3 cũng hỗ trợ websocket. Ta phải dùng nó thông qua websocket provider or http provider. Để thiết lập kết nối vĩnh viễn, chạy infura api kết nối với ethereum blockchain và tạo provider với API đó là web3 sẽ duy trì kết nối khi chạy ct, còn lại thao tác như bth
