Instruction Explanation
add(x, y) F x + y
addmod(x, y, m) F (x + y) % m with arbitrary precision arithmetic
address F address of the current contract / execution context
and(x, y) F bitwise and of x and y
balance(a) F wei balance at address a
blockhash(b) F hash of block nr b - only for last 256 blocks excluding current
byte(n, x) F nth byte of x, where the most significant byte is the 0th byte
calldatacopy(t, f, s) - copy s bytes from calldata at position f to mem at position t
calldataload(p) F call data starting from position p (32 bytes)
calldatasize F size of call data in bytes
call(g, a, v, in, insize, out, outsize) F call contract at address a with input mem[in…(in+insize)) providing g gas and v wei and output area mem[out…(out+outsize)) returning 0 on error (eg. out of gas) and 1 on success
callcode(g, a, v, in, insize, out, outsize) F identical to call but only use the code from a and stay in the context of the current contract otherwise
caller F call sender (excluding delegatecall)
callvalue F wei sent together with the current call
codesize F size of the code of the current contract / execution context
codecopy(t, f, s) - copy s bytes from code at position f to mem at position t
create(v, p, n) F create new contract with code mem[p…(p+n)) and send v wei and return the new address
create2(v, p, n, s) C create new contract with code mem[p…(p+n)) at address keccak256(0xff . this . s . keccak256(mem[p…(p+n))) and send v wei and return the new address, where 0xff is a 8 byte value, this is the current contract’s address as a 20 byte value and s is a big-endian 256-bit value
delegatecall(g, a, in, insize, out, outsize) H identical to callcode but also keep caller and callvalue
difficulty F difficulty of the current block
div(x, y) F x / y
dup1 … dup16 F copy nth stack slot to the top (counting from top)
eq(x, y) F 1 if x == y, 0 otherwise
exp(x, y) F x to the power of y
extcodecopy(a, t, f, s) - like codecopy(t, f, s) but take code at address a
extcodesize(a) F size of the code at address a
extcodehash(a) C code hash of address a
gas F gas still available to execution
gaslimit F block gas limit of the current block
gasprice F gas price of the transaction
gt(x, y) F 1 if x > y, 0 otherwise
iszero(x) F 1 if x == 0, 0 otherwise
jump(label) - F jump to label / code position
jumpi(label, cond) - F jump to label if cond is nonzero
keccak256(p, n) F keccak(mem[p…(p+n)))
lt(x, y) F 1 if x < y, 0 otherwise
log0(p, s) - F log without topics and data mem[p…(p+s))
log1(p, s, t1) - F log with topic t1 and data mem[p…(p+s))
log2(p, s, t1, t2) - F log with topics t1, t2 and data mem[p…(p+s))
log3(p, s, t1, t2, t3) - F log with topics t1, t2, t3 and data mem[p…(p+s))
log4(p, s, t1, t2, t3, t4) - F log with topics t1, t2, t3, t4 and data mem[p…(p+s))
mload(p) F mem[p…(p+32))
mod(x, y) F x % y
mul(x, y) F x * y
mulmod(x, y, m) F (x * y) % m with arbitrary precision arithmetic
mstore(p, v) - F mem[p…(p+32)) := v
mstore8(p, v) - F mem[p] := v & 0xff (only modifies a single byte)
msize F size of memory, i.e. largest accessed memory index
not(x) F ~x, every bit of x is negated
number F current block number
or(x, y) F bitwise or of x and y
origin F transaction sender
pc F current position in code
pop(x) - F remove the element pushed by x
push1 ... push32 F place x on stack
returndatacopy(t, f, s) - B copy s bytes from returndata at position f to mem at position t
returndatasize B size of the last returndata
return(p, s) - F end execution, return data mem[p…(p+s))
revert(p, s) - B end execution, revert state changes, return data mem[p…(p+s))
sar(x, y) C arithmetic shift right y by x bits
sdiv(x, y) F x / y, for signed numbers in two’s complement
sgt(x, y) F 1 if x > y, 0 otherwise, for signed numbers in two’s complement
sha3(p, s) F compute the SHA3 hash of the s bytes starting at memory position p
shl(x, y) C logical shift left y by x bits
shr(x, y) C logical shift right y by x bits
signextend(i, x) F sign extend from (i*8+7)th bit counting from least significant
sload(p) F storage[p]
smod(x, y) F x % y, for signed numbers in two’s complement
sstore(p, v) - F storage[p] := v
staticcall(g, a, in, insize, out, outsize) B identical to call(g, a, 0, in, insize, out, outsize) but do not allow state modifications
stop - F stop execution, identical to return(0,0)
sub(x, y) F x - y
swap1 ... swap16 * F swap topmost and nth stack slot below it
timestamp F timestamp of the current block in seconds since the epoch
xor(x, y) F bitwise xor of x and y
selfdestruct(a) - F end execution, destroy current contract and send funds to a
invalid - F end execution with invalid instruction
